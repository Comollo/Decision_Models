b = c(849, 230) #upper bound
constraints = c("<=", "<=")
library(linprog)
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints) #solver
#risultato 1
summary(sol)
shadow_price = sol$con
#risultato sul dataset
set[which(sol$solution != 0),] %>%
arrange(Casino, tipo) %>%
View()
Vincolo2 = function(df){
"funzione per costruire il vincolo 2"
x = unique(df$Section)
y = unique(df$Casino)
a = c()
for (t in 1:length(y)) {
for (i in 1:length(x)) {
for (k in 1:2) {
a = append(a, ifelse(df$Section == x[i] & df$Casino == y[t], 1, 0))
}
}
}
A = matrix(a,16,78, byrow = T)
return(A)
}
#Vincolo 2
A1 = Vincolo2(set)
#Vincolo 1 e Vincolo 2 (Matrice A)
A = rbind(A, A1)
#Vettore B aggiornato
b = c(b,
rep(c(round(0.2*849), round(0.3*849)), 4), rep(c(round(0.15*230), round(0.35*230)), 4))
constraints = c(constraints,
rep(c(">=", "<="), 8))
#Risultato 2
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
shadow_price = sol$con
#risultato sul dataset
set[which(sol$solution != 0),] %>%
arrange(Casino, tipo) %>%
View()
#forse le macchine con più giocate sono quelle più utilizzate?
ggplot(data=set, aes(x=set$giocate_totali, y = set$numero_macchine)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("a settembre, più macchine ci sono più si gioca? Si") +
labs(x="Giocate Totali", y="Numero di Macchine") +
theme_classic() #si
ggplot(data=set, aes(x=set$giocate_unitarie, y = set$numero_macchine)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("a settembre, più macchine ci sono più si gioca? No") +
labs(x="Giocate unitarie", y="Numero di Macchine") +
theme_classic() #no
#forse il numero di giocate dipende dal wage minimo
ggplot(data=set, aes(x= set$Denomination, y=set$giocate_totali)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Più monete piccole puoi inserire più giochi? No!") +
labs(x="Wage minimo", y="giocate totali") +
theme_classic() #ni
cor(set$Denomination, set$giocate_totali) #bassa dipendenza lineare
ricavi_sezione = tot %>%
group_by(Section) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario),
ricavo_medio_totale = mean(ricavi_totali))
ggplot(data=ricavi_sezione, aes(x=ricavi_sezione$Section, y = ricavi_sezione$ricavo_medio_totale)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Sezione di LDE") +
labs(x="Sezione", y="Ricavo medio unitario") +
theme_classic()
ricavi_casino = tot %>%
group_by(Casino) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_sezione, aes(x=ricavi_casino$Casino, y = ricavi_casino$ricavo_medio_unitario)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Casino di LDE") +
labs(x="Sezione", y="Ricavo medio unitario") +
theme_classic()
View(ricavi_casino)
ggplot(data=ricavi_sezione, aes(x=ricavi_casino$Casino, y = ricavi_casino$ricavo_medio_unitario)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Casino di LDE") +
labs(x="Sezione", y="Ricavo medio unitario") +
theme_classic()
View(ricavi_casino)
ggplot(data=ricavi_casino, aes(x=ricavi_casino$Casino, y = ricavi_casino$ricavo_medio_unitario)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Casino di LDE") +
labs(x="Casino", y="Ricavo medio unitario") +
theme_classic()
cor(set$Denomination, set$giocate_totali) #bassa dipendenza lineare
set$Casino = as.factor(set$Casino)
p = ggplot(set, aes(x=Casino, y=giocate_totali, fill = Casino)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(y = "Giocate toali") +
ggtitle("Distribuzione giocate totali settembre") +
geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_dark()
data_summary <- function(x) {
"funzione per mettere intervallo di confidenza attorno alla media"
m = mean(x)
ymin = t.test(x)$conf.int[1]
ymax = t.test(x)$conf.int[2]
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
t.test(set$giocate_totali ~ set$Casino)
summary(set[Casino == "Aries", "giocate_totali"])
summary(set[set$Casino == "Aries", "giocate_totali"])
summary(set[set$Casino == "Libra", "giocate_totali"])
#dataframe in input per la discretizzaztione;
#si può usare "discretize_get_bins" ma non permette il settaggio con i quantili
#il risultato sarebbe lo stesso daframe con valori chiaramenti diversi
d_bins = data_frame(variable = "giocate_totali",
cuts = paste0("122810","|","601962","|","1665180","|","inf"))
aries_discrettizato = discretize_df(set %>% filter(Casino=="Aries"),
data_bins = d_bins,
stringsAsFactors = T)
View(aries_discrettizato)
d_bins1 = data_frame(variable = "giocate_totali",
cuts = paste0("80424","|","209740","|","617728","|","inf"))
libra_discrettizato = discretize_df(set %>% filter(Casino=="Libra"),
data_bins = d_bins,
stringsAsFactors = T)
View(libra_discrettizato)
set_discretizzato = rbind(aries_discrettizato, libra_discrettizato)
View(set_discretizzato)
m = lm(numero_macchine ~ giocate_totali, data = set_discretizzato)
summary(m)
chisq.test(set_discretizzato$giocate_totali set_discretizzato$tipo)
chisq.test(set_discretizzato$giocate_totali, set_discretizzato$tipo)
#ora raggruppo per giocate_unitarie che sono state discretizzate e calcolo alcune statistiche per decidere la soglia
set_discrettizato %>%
group_by(giocate_totali) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
View()
#ora raggruppo per giocate_unitarie che sono state discretizzate e calcolo alcune statistiche per decidere la soglia
set_discretizato %>%
group_by(giocate_totali) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
View()
#ora raggruppo per giocate_unitarie che sono state discretizzate e calcolo alcune statistiche per decidere la soglia
set_discretizzato %>%
group_by(giocate_totali) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
View()
unique(set_discretizzato$giocate_totali)
aries_discrettizato = discretize_df(set %>% filter(Casino=="Aries"),
data_bins = d_bins1,
stringsAsFactors = T)
d_bins1 = data_frame(variable = "giocate_totali",
cuts = paste0("80424","|","209740","|","617728","|","inf"))
#dataframe in input per la discretizzaztione;
#si può usare "discretize_get_bins" ma non permette il settaggio con i quantili
#il risultato sarebbe lo stesso daframe con valori chiaramenti diversi
d_bins = data_frame(variable = "giocate_totali",
cuts = paste0("122810","|","601962","|","1665180","|","inf"))
aries_discrettizato = discretize_df(set %>% filter(Casino=="Aries"),
data_bins = d_bins,
stringsAsFactors = T)
d_bins1 = data_frame(variable = "giocate_totali",
cuts = paste0("80424","|","209740","|","617728","|","inf"))
libra_discrettizato = discretize_df(set %>% filter(Casino=="Libra"),
data_bins = d_bins1,
stringsAsFactors = T)
set_discretizzato = rbind(aries_discrettizato, libra_discrettizato)
m = lm(numero_macchine ~ giocate_totali, data = set_discretizzato)
summary(m)
rm(m)
#ora raggruppo per giocate_unitarie che sono state discretizzate e calcolo alcune statistiche per decidere la soglia
set_discretizzato %>%
group_by(giocate_totali) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
View()
#ora raggruppo per giocate_unitarie che sono state discretizzate e calcolo alcune statistiche per decidere la soglia
set_discretizzato %>%
group_by(giocate_totali, Casino) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
View()
#ora raggruppo per giocate_unitarie che sono state discretizzate e calcolo alcune statistiche per decidere la soglia
set_discretizzato %>%
group_by(giocate_totali, Casino) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
arrange(Casino) %>%
View()
chisq.test(set_discretizzato$giocate_totali, set_discretizzato$tipo)
plot(set_discretizzato$giocate_totali, set_discretizzato$tipo)
chisq.test(set_discretizzato$giocate_totali, set_discretizzato$MachineType)
chisq.test(set_discretizzato$giocate_totali, set_discretizzato$Denomination)
chisq.test(set_discretizzato$giocate_totali, set_discretizzato$tipo)
set_discretizzato %>%
group_by(giocate_totali, Casino, tipo) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
arrange(Casino) %>%
View()
set_discretizzato %>%
group_by(giocate_totali, Casino, tipo) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
arrange(Casino) %>%
View()
#ora raggruppo per giocate_unitarie che sono state discretizzate e calcolo alcune statistiche per decidere la soglia
set_discretizzato %>%
group_by(giocate_totali, Casino) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
arrange(Casino) %>%
View()
Vincolo4 = function(df) {
A = predict(dummyVars(~ giocate_totali, data = set_discrettizato), newdata = set_discrettizato)
A = t(A)
return(A)
}
Vincolo4 = function(df) {
A = predict(dummyVars(~ giocate_totali, data = df), newdata = df)
A = t(A)
return(A)
}
A2 = Vincolo4(set_discretizzato)
View(A2)
View(A2)
A = rbind(A, A2)
A2[rep(row.names(A2), 2)]
A2[rep(row.names(A2), 2),]
A2 = A2[rep(row.names(A2), 2),]
A2 = A2[rep(seq_len(nrow(A2)), each= 2),]
Vincolo4 = function(df) {
A = predict(dummyVars(~ giocate_totali, data = df), newdata = df)
A = t(A)
return(A)
}
#Vincolo 4
A2 = Vincolo4(set_discretizzato)
A2 = A2[rep(seq_len(nrow(A2)), each= 2),]
View(A2)
A2[c(1:7,9:15),]
A2 = A2[c(1:7,9:15),]
View(A2)
A = predict(dummyVars(~Casino, data = set), newdata = set)
A = t(A)
#Vincolo 2
A1 = Vincolo2(set)
#Vincolo 1 e Vincolo 2 (Matrice A)
A = rbind(A, A1)
A = rbind(A, A2)
#aggiungo i valori massimi di macchine per categoria di giocate
b = c(b,
9,9,22,22,26,26,101,
3,3,5,5,9,9,34)
unique(set_discretizzato$giocate_totali)
18 + 16
A2 = A2[c(2:7,10:15),]
#Vincolo 4
A2 = Vincolo4(set_discretizzato)
#Sistemo la matrice in accordo con la predisposizione del vincolo
A2 = A2[rep(seq_len(nrow(A2)), each= 2),]
A2 = A2[c(2:7,10:15),]
#Vettore B del modello lineare
b = c(849, 230) #upper bound
#Vettore B aggiornato
b = c(b,
rep(c(round(0.2*849), round(0.3*849)), 4), rep(c(round(0.15*230), round(0.35*230)), 4))
constraints = c(constraints,
"<=", ">", "<=", ">", "<=", ">",
"<=", ">", "<=", ">", "<=", ">"
)
A = predict(dummyVars(~Casino, data = set), newdata = set)
A = t(A)
#Vincolo 2
A1 = Vincolo2(set)
#Vincolo 1 e Vincolo 2 (Matrice A)
A = rbind(A, A1)
A = rbind(A, A2)
#Vettore B: aggiungo i valori massimi di macchine per categoria di giocate
b = c(b,
9,9,22,22,26,101,
3,3,5,5,9,34)
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
shadow_price = sol$con
#risultato sul dataset
set[which(sol$solution != 0),] %>%
arrange(Casino, tipo) %>%
View()
View(shadow_price)
View(set_discretizzato)
View(data_summary)
View(data_summary)
View(Vincolo2)
View(Vincolo2)
View(Vincolo4)
View(Vincolo4)
Vincolo_con_caret = function(df, colonna){
"df = dataframe sul quale applicare la dummizzazione
colonna = colonna contenente i valori da rendere dummies"
A = predict(dummyVars(~colonna, data = df), newdata = df)
A = t(A)
}
A = Vincolo_con_caret(set, giocata_unitaria)
A = Vincolo_con_caret(set, "giocata_unitaria")
A = Vincolo_con_caret(set, "giocata_unitaria")
View(set)
A = Vincolo_con_caret(set, "giocate_unitaria")
Vincolo_con_caret()= function(df, colonna){
A = predict(dummyVars(~df[,colonna], data = df), newdata = df)
A = t(A)
}
Vincolo_con_caret=  function(df, colonna){
A = predict(dummyVars(~df[,colonna], data = df), newdata = df)
A = t(A)
}
A = Vincolo_con_caret(set, "Casino")
Vincolo_con_caret=  function(df, colonna){
A = predict(dummyVars(~colonna, data = df), newdata = df)
A = t(A)
}
A = Vincolo_con_caret(set, "Casino")
Vincolo1 =  function(df){
A = predict(dummyVars(~Casino, data = df), newdata = df)
A = t(A)
}
A = Vincolo_con_caret(set)
Vincolo1 =  function(df){
A = predict(dummyVars(~Casino, data = df), newdata = df)
A = t(A)
return(A)
}
A = Vincolo_con_caret(set)
A = Vincolo1(set)
View(A)
rm(Vincolo_con_caret())
rm(Vincolo_con_caret
)
#Vettore B del modello lineare
b = c(849, 230) #upper bound
constraints = c("<=", "<=")
#Matrice A:
#1) creo un vettore di 1 e di 0 -> dove le variabilid decisionali sono attive varrà 1 altrimenti 0;
#2) popolo la matrice A (modello lineare) attraverso il vettore creato
Vincolo2 = function(df){
"funzione per costruire il vincolo 2"
x = unique(df$Section)
y = unique(df$Casino)
a = c()
for (t in 1:length(y)) {
for (i in 1:length(x)) {
for (k in 1:2) {
a = append(a, ifelse(df$Section == x[i] & df$Casino == y[t], 1, 0))
}
}
}
A = matrix(a,16,78, byrow = T)
return(A)
}
#Vincolo 2
A1 = Vincolo2(set)
#Vincolo 1 e Vincolo 2 (Matrice A)
A = rbind(A, A1)
#Vettore B aggiornato
b = c(b,
rep(c(round(0.2*849), round(0.3*849)), 4), rep(c(round(0.15*230), round(0.35*230)), 4))
constraints = c(constraints,
rep(c(">=", "<="), 8))
Vincolo4 = function(df) {
A = predict(dummyVars(~ giocate_totali, data = df), newdata = df)
A = t(A)
return(A)
}
#Vincolo 4
A2 = Vincolo4(set_discretizzato)
#Sistemo la matrice in accordo con la predisposizione del vincolo
A2 = A2[rep(seq_len(nrow(A2)), each= 2),]
constraints = c(constraints,
">=","<", ">=", "<", ">=", "<", ">=",
">=","<", ">=", "<", ">=", "<", ">="
)
#Vettore B: aggiungo i valori massimi di macchine per categoria di giocate
b = c(b,
1,9,9,22,22,26,101,
1,3,3,5,5,9,34)
A2 = A2[c(1:7,9:15),]
A = rbind(A, A2)
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
#risultato sul dataset
set[which(sol$solution != 0),] %>%
arrange(Casino, tipo) %>%
View()
b
View(A2)
Vincolo3 = function(df){
"funzione per costruire il vincolo 3"
x = unique(df$tipo)
y = unique(df$Casino)
a = c()
for (t in 1:length(y)) {
for (i in 1:length(x)) {
a = append(a, ifelse(df$tipo == x[i] & df$Casino == y[t], 1, 0))
}
}
A = matrix(a,28,78, byrow = T)
A = A[c(1:13,15:28),] #la riga 14 è vuota siccome nel casino Aries ci sono 13 categorie e non 14 -> si rimuove
return(A)
}
#Vincolo 3
prova = Vincolo3(set)
View(prova)
View(prova)
rm(prova)
View(A2)
View(set_discretizzato)
b
constraints
test = predict(dummyVars(~ giocate_totali, data = set_discretizzato), newdata = set_discretizzato)
View(test)
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
sol$maximum
sol$maxi
sol$maxiter
help("solveLP")
sol$status
set %>%
group_by(Casino, Section) %>%
summarise(Num_macchine = sum(numero_macchine)) %>%
mutate(prop_per_mese = round(Num_macchine / sum(Num_macchine), 2)) %>%
View()
A = Vincolo1(set)
#Vettore B del modello lineare
b = c(849, 230) #upper bound
constraints = c("<=", "<=")
#Vincolo 2
A1 = Vincolo2(set)
#Vincolo 1 e Vincolo 2 (Matrice A)
A = rbind(A, A1)
#Vettore B aggiornato
b = c(b,
rep(c(round(0.2*849), round(0.3*849)), 4), rep(c(round(0.15*230), round(0.35*230)), 4))
constraints = c(constraints,
rep(c(">=", "<="), 8))
#Vettore B: aggiungo i valori massimi di macchine per categoria di giocate
b = c(b,
1,9,9,22,22,26,26,
1,3,3,5,5,9,9)
constraints = c(constraints,
">=","<", ">=", "<", ">=", "<", ">=",
">=","<", ">=", "<", ">=", "<", ">="
)
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
A = rbind(A, A2)
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints, maxiter = 1000000000000)
summary(sol)
shadow_price = sol$con
sol$maxiter
#ora raggruppo per giocate_unitarie che sono state discretizzate e calcolo alcune statistiche per decidere la soglia
set_discretizzato %>%
group_by(giocate_totali, Casino) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
arrange(Casino) %>%
View()
sol1 <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
A = Vincolo1(set)
#Vettore B del modello lineare
b = c(849, 230) #upper bound
constraints = c("<=", "<=")
#Vincolo 2
A1 = Vincolo2(set)
#Vincolo 1 e Vincolo 2 (Matrice A)
A = rbind(A, A1)
#Vettore B aggiornato
b = c(b,
rep(c(round(0.2*849), round(0.3*849)), 4), rep(c(round(0.15*230), round(0.35*230)), 4))
constraints = c(constraints,
rep(c(">=", "<="), 8))
A = rbind(A, A2)
#Vettore B: aggiungo i valori massimi di macchine per categoria di giocate
b = c(b,
1,9,9,22,22,26,101,
1,3,3,5,5,9,34)
constraints = c(constraints,
">=","<", ">=", "<", ">=", "<", ">=",
">=","<", ">=", "<", ">=", "<", ">="
)
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
sol1 == sol
sol1$solution == sol$solution
