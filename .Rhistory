#NB: le linee servono per sottolineare il fenomeno altalenante. Non esiste rilevazione infra mese.
ricavi_mese$Month = as.factor(ricavi_mese$Month)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Più macchine hai più guadagni? In linea di massima SI!") +
labs(x="Numero medio macchine", y="Ricavi medi totali") +
theme_minimal()
#In generale vale più macchine hai più guadagni
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_unitario,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Tante macchine non significa ricavi unitari elevati!") +
labs(x="Numero medio macchine", y="Ricavi medi unitari") +
theme_minimal()
#è comunque utile analizzare i ricavi indipendentemente dalla capienza, ergo i ricavi unitari.
ricavi_categoria = tot %>%
group_by(Denomination, MachineType) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario)) %>%
mutate(type = paste0(Denomination,sep = "_", MachineType))
ggplot(data=ricavi_categoria, aes(x=ricavi_categoria$type, y = ricavi_categoria$ricavo_medio_unitario)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Categoria di LDE") +
labs(x="Categoria", y="Ricavo medio unitario") +
theme_classic() #[QUESTO DEVE ESSERE UN BAR PLOT]
ricavi_sezione = tot %>%
group_by(Section) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_sezione, aes(x=ricavi_sezione$Section, y = ricavi_sezione$ricavo_medio_unitario)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Sezione di LDE") +
labs(x="Sezione", y="Ricavo medio unitario") +
theme_classic() #[QUESTO DEVE ESSERE UN BAR PLOT]
ricavi_casino = tot %>%
group_by(Casino) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_casino, aes(x=ricavi_casino$Casino, y = ricavi_casino$ricavo_medio_unitario)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Casino di LDE") +
labs(x="Casino", y="Ricavo medio unitario") +
theme_classic() #[QUESTO DEVE ESSERE UN BAR PLOT]
tot %>%
group_by(tipo) %>%
summarise(n = n()) %>%
View()
#14 categorie al massimo
tot %>% group_by(Casino, tipo, Section, Month) %>%
summarise(n = n()) %>%
arrange(tipo, Section) %>%
group_by(Section) %>%
summarise(n = n()) %>%
View()
#numero totale categorie per sezione di LDE nell'arco dei 12 mesi
tot %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Casino, Section) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))) %>%
View()
#numero medio di categorie per sezione nell'arco dei 12 mesi
tot %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Month) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))) %>%
View()
#numero medio di categorie per mese
##########################
# MODELING: settembre
##########################
set = tot %>%
filter(Month == ymd("2011-09-01")) %>%
arrange(Casino)
set = as.data.frame(set)
f_obj = round(set$ricavo_unitario) #ricavi unitari = da MAX
#quante macchine ci sono ogni mese nei 2 casino?
tot %>%
group_by(Casino, Month) %>%
summarise(n_macchine = sum(numero_macchine)) %>%
arrange(Month) %>%
View()
#Vincolo 1: numero massimo di macchine per casino nel mese di settembre
library(caret)
Vincolo1 =  function(df){
"df = dataset del mese
dummy + trasposizione"
A = predict(dummyVars(~ Casino, data = df), newdata = df)
A = t(A)
return(A)
} #approccio valido se ho una sola colonna
A = Vincolo1(set)
#Vettore B del modello lineare
b = c(849, 230) #upper bound
constraints = c("<=", "<=")
library(linprog)
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints) #solver
#risultato 1
summary(sol)
shadow_price = sol$con
#risultato sul dataset
set[which(sol$solution != 0),] %>%
arrange(Casino, tipo) %>%
View()
#Vincolo 2: proporzione macchine in ciascuna sezione dei 2 Casino
set %>%
group_by(Casino, Section) %>%
summarise(Num_macchine = sum(numero_macchine)) %>%
mutate(prop_per_mese = round(Num_macchine / sum(Num_macchine), 2)) %>%
View()
View(numslots)
nslots
nslots <- df %>%
group_by(Month, Casino) %>%
summarise(sum = sum(numero_macchine)) %>%
arrange(Month) #ensure order
View(nslots)
View(f.A1)
help("dummyVars")
View(rbind(t(df[, "Casino"]), t(df$Month), f.A)) #Check results
View(rbind(t(df[, "Casino"]), t(df$Month), f.A1)) #Check results
View(slot)
View(df)
nslots
nslots
#First create dummy var for Casino and month, used to activate each constraint depending on the casino and month
f.A1 <- t(predict(dummyVars(~ Casino : I(factor(Month)), data = df), newdata = df))
#View(rbind(t(df[, "Casino"]), t(df$Month), f.A)) #Check results
#Coefficients
b1 <- nslots #month1-> casino1, month1 ->casino2, month2 -> casino1, ...
f.b1 <-  b1# vector of right-hand side values - upper bounds of total number of slots per month
f.dir1 <- rep("<=", length(f.b1)) # direction of the inequalities
sol1 <- solveLP(f.obj, f.b1, f.A1, maximum = TRUE, const.dir = f.dir1) #solver
numslots.section <- df %>%
group_by(Month, Casino, Section) %>%
summarise(sum = sum(numero_macchine),
ricavo = sum(ricavi_totali)) %>%
#il mutate perde un livello dopo il summarise
mutate(sum_casino = sum(sum), prop_per_mese = round(sum / sum(sum), 3))
ggplot(data = numslots.section, aes(x = sum, y = prop_per_mese)) +
geom_point(aes(color = Casino, size = ricavo)) +
ggtitle("Distribuzione della proporzione del numero di slot sul totale del casino per ogni mese") +
xlab("Numero slot per sezione (per mese)") +
ylab("Proporzione di slot in ogni mese") #+ facet_wrap(~Section)
#Ottieni numero di slot presenti in ogni casino per mese da usare come upper bound
numslots.casino <- NULL
nslots <- df %>%
group_by(Month, Casino) %>%
summarise(sum = sum(numero_macchine)) %>%
arrange(Month) #ensure order
nslots <- nslots$sum #numero di slot per casino e mese
#First create dummy var for Casino and month, used to activate each constraint depending on the casino and month
f.A1 <- t(predict(dummyVars(~ Casino : I(factor(Month)), data = df), newdata = df))
#View(rbind(t(df[, "Casino"]), t(df$Month), f.A)) #Check results
#Coefficients
b1 <- nslots #month1-> casino1, month1 ->casino2, month2 -> casino1, ...
f.b1 <-  b1# vector of right-hand side values - upper bounds of total number of slots per month
f.dir1 <- rep("<=", length(f.b1)) # direction of the inequalities
sol1 <- solveLP(f.obj, f.b1, f.A1, maximum = TRUE, const.dir = f.dir1) #solver
sol1bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A1, const.dir = f.dir1, const.rhs = f.b1)
summary(sol1)
sol1$con
#risultato 1
summary(sol)
all(f_obj == f.obj[1:78])
View(f.obj[1:78] != f_obj)
View(tot)
View(set)
View(set)
#risultato sul dataset
set[which(sol$solution != 0),] %>%
arrange(Casino, tipo) %>%
View()
library(tidyverse)
library(lubridate)
library(caret)
library(linprog)
options(scipen = 999)
slot <- readxl::read_excel("data/Lucky Duck Entertainment revenue 2013.xls", na = c(".", "NA", "NaN"))
library(tidyverse)
library(lubridate)
options(scipen = 999)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(tidyverse)
library(lubridate)
library(rstudioapi)
options(scipen = 999)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(tidyverse)
library(lubridate)
options(scipen = 999)
setwd("C:\\Users\\Donatella\\Desktop\\bicocca\\GITHUB\\Decision_models")
knitr::opts_knit$set(root.dir = "C:\\Users\\Donatella\\Desktop\\bicocca\\GITHUB\\Decision_models")
slot <- readxl::read_excel("Lucky Duck Entertainment revenue 2013.xls", na = c(".", "NA", "NaN"))
str(slot)
plot(pressure)
rm(current_path)
library(dplyr)
library(lubridate)
library(funModeling)
library(ggplot2)
options(scipen = 999)
setwd("C:\\Users\\Donatella\\Desktop\\bicocca\\GITHUB\\Decision_models")
knitr::opts_knit$set(root.dir = "C:\\Users\\Donatella\\Desktop\\bicocca\\GITHUB\\Decision_models")
slot <- readxl::read_excel("Lucky Duck Entertainment revenue 2013.xls", na = c(".", "NA", "NaN"))
str(slot)
status = df_status(slot, print_results = F)
summary(slot$Month) #12 mesi
status = df_status(slot, print_results = F)
summary(slot$Month) #12 mesi
kable(status)
status = df_status(slot, print_results = F)
summary(slot$Month) #12 mesi
knitr::kable(status)
df <- slot %>%
group_by(Month, Casino, Section, MachineType, Denomination) %>%
summarise(numero_macchine    = sum(NoMachines),
ricavi_totali      = sum(GrossRevenue),
ricavo_unitario    = ricavi_totali/numero_macchine,
giocate_totali     = sum(Plays),
giocate_unitarie   = round(giocate_totali/numero_macchine),
ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination) %>%
mutate(tipo = paste0(MachineType, "_", Denomination))
head(df)
slot <- readxl::read_excel("Lucky Duck Entertainment revenue 2013.xls", na = c(".", "NA", "NaN"))
str(slot)
library(dplyr)
library(lubridate)
library(funModeling)
library(ggplot2)
options(scipen = 999)
slot <- readxl::read_excel("Lucky Duck Entertainment revenue 2013.xls", na = c(".", "NA", "NaN"))
str(slot)
df <- slot %>%
group_by(Month, Casino, Section, MachineType, Denomination) %>%
summarise(numero_macchine    = sum(NoMachines),
ricavi_totali      = sum(GrossRevenue),
ricavo_unitario    = ricavi_totali/numero_macchine,
giocate_totali     = sum(Plays),
giocate_unitarie   = round(giocate_totali/numero_macchine),
ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination) %>%
mutate(tipo = paste0(MachineType, "_", Denomination))
head(df)
ricavi_mese = tot %>%
group_by(Month) %>%
summarise(ricavo_medio_totale = mean(ricavi_totali),
ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
ricavi_mese = df %>%
group_by(Month) %>%
summarise(ricavo_medio_totale = mean(ricavi_totali),
ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
ggplot(data=ricavi_mese, aes(x=ricavi_mese$Month, y = ricavi_mese$ricavo_medio_unitario)) +
geom_line(alpha=.5, size=1, color="#880011") +
ggtitle("Ricavi per Mese di LDE") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic()
ricavi_mese = df %>%
group_by(Month) %>%
summarise(ricavo_medio_totale = mean(ricavi_totali),
ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
ggplot(data=ricavi_mese, aes(x=ricavi_mese$Month, y = ricavi_mese$ricavo_medio_unitario)) +
geom_line(alpha=.5, size=1, color="#880011") +
ggtitle("Ricavi per Mese di LDE") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic()
ricavi_mese$Month = as.factor(ricavi_mese$Month)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Più macchine hai più guadagni? In linea di massima SI!") +
labs(x="Numero medio macchine", y="Ricavi medi totali") +
theme_minimal()
ricavi_mese = df %>%
group_by(Month) %>%
summarise(ricavo_medio_totale = mean(ricavi_totali),
ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
ggplot(data=ricavi_mese, aes(x=ricavi_mese$Month, y = ricavi_mese$ricavo_medio_unitario)) +
geom_line(alpha=.5, size=1, color="#880011") +
ggtitle("Ricavi per Mese di LDE") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic()
ricavi_mese$Month = as.factor(ricavi_mese$Month)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Più macchine hai più guadagni? In linea di massima SI!") +
labs(x="Numero medio macchine", y="Ricavi medi totali") +
theme_minimal()
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_unitario,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Tante macchine non significa ricavi unitari elevati!") +
labs(x="Numero medio macchine", y="Ricavi medi unitari") +
theme_minimal()
ricavi_categoria = slot %>%
group_by(Denomination, MachineType) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario)) %>%
mutate(type = paste0(Denomination,sep = "_", MachineType))
View(slot)
ricavi_categoria = df %>%
group_by(Denomination, MachineType) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario)) %>%
mutate(type = paste0(Denomination,sep = "_", MachineType))
ggplot(data=ricavi_categoria, aes(x=ricavi_categoria$type, y = ricavi_categoria$ricavo_medio_unitario)) +
geom_bar(stat="identity", fill = "firebrick3" ) +
ggtitle("Ricavi per Categoria di LDE") +
labs(x="Categoria", y="Ricavo medio unitario") +
theme_classic()
ricavi_sezione = tot %>%
group_by(Section) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ricavi_sezione = df %>%
group_by(Section) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_sezione, aes(x=ricavi_sezione$Section, y = ricavi_sezione$ricavo_medio_unitario)) +
geom_bar(stat="identity", fill = "forestgreen", width = 0.4 ) +
geom_text(aes(label = round(ricavi_sezione$ricavo_medio_unitario)), nudge_y = 700 ) +
ggtitle("Ricavi per Sezione di LDE") +
labs(x="Sezione", y="Ricavo medio unitario") +
theme_classic()
ricavi_casino = df %>%
group_by(Casino) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_casino, aes(x=ricavi_casino$Casino, y = ricavi_casino$ricavo_medio_unitario)) +
geom_bar(stat="identity", fill = "blue", width = 0.4 ) +
geom_text(aes(label = round(ricavi_casino$ricavo_medio_unitario)), nudge_y = 700 ) +
ggtitle("Ricavi per Casino di LDE") +
labs(x="Casino", y="Ricavo medio unitario") +
theme_classic()
View(ricavi_categoria)
ricavi_categoria = df %>%
group_by(Denomination, MachineType) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario)) %>%
mutate(type = paste0(Denomination,sep = "_", MachineType))
ggplot(data=ricavi_categoria, aes(x=ricavi_categoria$type, y = sort(ricavi_categoria$ricavo_medio_unitario))) +
geom_bar(stat="identity", fill = "firebrick3" ) +
ggtitle("Ricavi per Categoria di LDE") +
labs(x="Categoria", y="Ricavo medio unitario") +
theme_classic()
ricavi_sezione = df %>%
group_by(Section) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_sezione, aes(x=ricavi_sezione$Section, y = sort(ricavi_sezione$ricavo_medio_unitario))) +
geom_bar(stat="identity", fill = "forestgreen", width = 0.4 ) +
geom_text(aes(label = round(ricavi_sezione$ricavo_medio_unitario)), nudge_y = 700 ) +
ggtitle("Ricavi per Sezione di LDE") +
labs(x="Sezione", y="Ricavo medio unitario") +
theme_classic()
ricavi_categoria = df %>%
group_by(Denomination, MachineType) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario)) %>%
mutate(type = paste0(Denomination,sep = "_", MachineType))
ggplot(data=ricavi_categoria, aes(x=ricavi_categoria$type, y = sort(ricavi_categoria$ricavo_medio_unitario))) +
geom_bar(stat="identity", fill = "firebrick3" ) +
ggtitle("Ricavi per Categoria di LDE") +
labs(x="Categoria", y="Ricavo medio unitario") +
theme_classic()
ricavi_categoria = df %>%
group_by(Denomination, MachineType) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario)) %>%
mutate(type = paste0(Denomination,sep = "_", MachineType))
ggplot(data=ricavi_categoria, aes(x=ricavi_categoria$type, y = sort(ricavi_categoria$ricavo_medio_unitario))) +
geom_bar(stat="identity", fill = "firebrick3" ) +
ggtitle("Ricavi per Categoria di LDE") +
labs(x="Categoria", y="Ricavo medio unitario") +
theme_classic()
ricavi_categoria = df %>%
group_by(Denomination, MachineType) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario)) %>%
mutate(type = paste0(Denomination,sep = "_", MachineType))
ggplot(data=ricavi_categoria, aes(x=ricavi_categoria$type, y = sort(ricavi_categoria$ricavo_medio_unitario))) +
geom_bar(stat="identity", fill = "firebrick3" ) +
ggtitle("Ricavi per Categoria di LDE") +
labs(x="Categoria", y="Ricavo medio unitario") +
theme_classic()
ricavi_sezione = df %>%
group_by(Section) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_sezione, aes(x=ricavi_sezione$Section, y = sort(ricavi_sezione$ricavo_medio_unitario))) +
geom_bar(stat="identity", fill = "forestgreen", width = 0.4 ) +
geom_text(aes(label = round(ricavi_sezione$ricavo_medio_unitario)), nudge_y = 700 ) +
ggtitle("Ricavi per Sezione di LDE") +
labs(x="Sezione", y="Ricavo medio unitario") +
theme_classic()
ricavi_casino = df %>%
group_by(Casino) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_casino, aes(x=ricavi_casino$Casino, y = ricavi_casino$ricavo_medio_unitario)) +
geom_bar(stat="identity", fill = "blue", width = 0.4 ) +
geom_text(aes(label = round(ricavi_casino$ricavo_medio_unitario)), nudge_y = 700 ) +
ggtitle("Ricavi per Casino di LDE") +
labs(x="Casino", y="Ricavo medio unitario") +
theme_classic()
ricavi_mese = df %>%
group_by(Month) %>%
summarise(ricavo_medio_totale = mean(ricavi_totali),
ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
ggplot(data=ricavi_mese, aes(x=ricavi_mese$Month, y = ricavi_mese$ricavo_medio_unitario)) +
geom_line(alpha=.5, size=1, color="#880011") +
ggtitle("Ricavi per Mese di LDE") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic()
ricavi_mese$Month = as.factor(ricavi_mese$Month)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Più macchine hai più guadagni? In linea di massima SI!") +
labs(x="Numero medio macchine", y="Ricavi medi totali") +
theme_minimal()
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_unitario,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Tante macchine non significa ricavi unitari elevati!") +
labs(x="Numero medio macchine", y="Ricavi medi unitari") +
theme_minimal()
df %>%
group_by(tipo) %>%
summarise(n = n()) %>%
View()
#max 14
df %>% group_by(Casino, tipo, Section, Month) %>%
summarise(n = n()) %>%
arrange(tipo, Section) %>%
group_by(Section) %>%
summarise(n = n()) %>%
View()
#numero totale categorie per sezione di LDE nell'arco dei 12 mesi
df %>%
group_by(tipo) %>%
summarise(n = n()) %>%
View()
#max 14
df %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Casino, Section) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))) %>%
View()
df %>%
group_by(tipo) %>%
summarise(n = n()) %>%
View()
#max 14
52+67+50+56+33+87+96+87+54+53+24+96+8+19
df %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Casino, Section) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))) %>%
View()
df %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Month) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))) %>%
View()
df %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Month) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))) %>%
View()
df %>% group_by(Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Casino, Section) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))) %>%
View()
df %>% group_by(Section, Month) %>%
summarise(n = n()) %>%
arrange(Section) %>%
group_by(Section) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))) %>%
View()
df %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Casino, Section) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))) %>%
View()
tot %>% group_by(Casino, tipo, Section, Month) %>%
summarise(n = n()) %>%
arrange(tipo, Section) %>%
group_by(Section) %>%
summarise(n = n()) %>%
View()
df %>% group_by(Casino, tipo, Section, Month) %>%
summarise(n = n()) %>%
arrange(tipo, Section) %>%
group_by(Section) %>%
summarise(n = n()) %>%
View()
