s = unique(df$Section)
c = unique(df$Casino)
a = c()
for (t in 1:2) {
for (i in 1:4) {
for (k in 1:2) {
a = append(a, ifelse(df$Section == s[i] & df$Casino == c[t], 1, 0))
}
}
}
A = matrix(a,16,78, byrow = T)
return(A)
}
A1 = Vincolo2(set)
section = unique(set$Section)
casino = unique(set$Casino)
a1 = c()
for (t in 1:2) {
for (i in 1:4) {
for (k in 1:2) {
a1 = append(a1, ifelse(set$Section == section[i] & set$Casino == casino[t], 1, 0))
}
}
}
A1 = matrix(a1,16,78, byrow = T)
A1 = Vincolo2(set)
section = unique(set$Section)
casino = unique(set$Casino)
a1 = c()
for (t in 1:2) {
for (i in 1:4) {
for (k in 1:2) {
a1 = append(a1, ifelse(set$Section == section[i] & set$Casino == casino[t], 1, 0))
}
}
}
A2 = matrix(a1,16,78, byrow = T)
all(A1 == A2)
rm(A2, section, casino, a1)
#Vincolo 1 e Vincolo 2
A = rbind(A, A1)
set %>%
group_by(Casino, Section) %>%
summarise(Num_macchine = sum(numero_macchine)) %>%
mutate(prop_per_mese = round(Num_macchine / sum(Num_macchine), 2)) %>%
View()
#Vettore B aggiornato
b = c(849, 230,
rep(c(round(0.2*849), round(0.3*849)), 4), rep(c(round(0.15*230), round(0.35*230)), 4))
b
constraints = c("<=", "<=",
rep(c(">=", "<="), 8))
constraints
#Vettore B del modello lineare
b = c(849, 230) #upper bound
constraints = c("<=", "<=")
#Vettore B aggiornato
b = c(b,
rep(c(round(0.2*849), round(0.3*849)), 4), rep(c(round(0.15*230), round(0.35*230)), 4))
b
constraints = c(constraints,
rep(c(">=", "<="), 8))
constraints
#Risultato 2
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
set[which(sol$solution != 0),] %>%
arrange(Casino, tipo) %>%
View()
View(set)
set %>%
group_by(Casino, tipo) %>%
summarise(n = n(), macchine = sum(numero_macchine)) %>%
View()
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_unitario,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Più macchine hai più guadagni? Non è detto!") +
labs(x="Numero medio macchine per categoria", y="Ricavi medi unitari per categoria") +
theme_minimal()
View(ricavi_mese)
ricavi_mese = tot %>%
group_by(Month) %>%
summarise(ricavo_medio_totale = mean(ricavi_totali),
ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Più macchine hai più guadagni? Non è detto!") +
labs(x="Numero medio macchine per categoria", y="Ricavi medi unitari per categoria") +
theme_minimal()
ricavi_mese$Month = as.factor(ricavi_mese$Month)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Più macchine hai più guadagni? Non è detto!") +
labs(x="Numero medio macchine per categoria", y="Ricavi medi unitari per categoria") +
theme_minimal()
View(ricavi_mese)
137147/14
View(tot)
11000*14
14800*8
#NOTA: non ho idea se abbia più senso mettere i ricavi medi unitari (grafico 1) o i ricavi medi totali (grafico 2)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Più macchine hai più guadagni? In linea di massima SI!") +
labs(x="Numero medio macchine per categoria", y="Ricavi medi totali per categoria") +
theme_minimal()
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_unitario,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Tante macchine non significa ricavi unitari elevati!") +
labs(x="Numero medio macchine per categoria", y="Ricavi medi unitari per categoria") +
theme_minimal()
set %>%
group_by(Casino, tipo) %>%
summarise(n = n(), macchine = sum(numero_macchine)) %>%
View()
Vincolo3 = function(df){
"funzione per costruire il vincolo 3"
x = unique(df$tipo)
y = unique(df$Casino)
a = c()
for (t in 1:length(y)) {
for (i in 1:length(x)) {
a = append(a, ifelse(df$tipo == x[i] & df$Casino == y[t], 1, 0))
}
}
A = matrix(a,28,78, byrow = T)
A = A[c(1:13,15:28),] #la riga 14 è vuota siccome nel casino Aries ci sono 13 categorie e non 14
return(A)
}
A2 = Vincolo3(set)
tipo = unique(set$tipo)
casino = unique(set$Casino)
a2 = c()
for (t in 1:2) {
for (i in 1:14) {
a2 = append(a2, ifelse(set$tipo == tipo[i] & set$Casino == casino[t], 1, 0))
}
}
A3 = matrix(a2,28,78, byrow = T) #dovrebbe esserci una riga di tutti 0; presumo sia la 14 perchè in aries ci sono 13 e non 14 categorie
#c'è un errore nella costruzione della matrice A2 -> forse no proviamo!
A3 = A3[c(1:13,15:28),]
all(A3 == A2)
rm(tipo)
rm(casino)
rm(A3)
rm(a2)
#Vettore B
b = c(b,
rep(1,27))
constraints = c(constraints,
rep(">=", 27))
#Risultato 3
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
constraints
constraints = c(constraints,
rep(">=", 27))
constraints
#Risultato 3
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
b
#Vincolo 1 e Vincolo 2 (Matrice A)
A = rbind(A, A2)
#Vettore B
b = c(b,
rep(1,27))
constraints = c(constraints,
rep(">=", 27))
#Risultato 3
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
View(A)
#Vettore B del modello lineare
b = c(849, 230) #upper bound
constraints = c("<=", "<=")
#Vettore B aggiornato
b = c(b,
rep(c(round(0.2*849), round(0.3*849)), 4), rep(c(round(0.15*230), round(0.35*230)), 4))
constraints = c(constraints,
rep(c(">=", "<="), 8))
#Vettore B
b = c(b,
rep(1,27))
constraints = c(constraints,
rep(">=", 27))
#Risultato 3
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
set[which(sol$solution != 0),] %>%
arrange(Casino, tipo) %>%
View()#soluzione sul dataset!
#forse le macchine con più giocate sono quelle più utilizzate?
ggplot(data=set, aes(x=set$giocate_totali, y = set$numero_macchine)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Più macchine ci sono più si gioca? Si") +
labs(x="Giocate Totali", y="Numero di Macchine") +
theme_classic() #si
#ma è vero per per tutto l'anno
ggplot(data=tot, aes(x=set$giocate_totali, y = set$numero_macchine)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Più macchine ci sono più si gioca? Si") +
labs(x="Giocate Totali", y="Numero di Macchine") +
theme_classic() #si
#ma è vero per per tutto l'anno
ggplot(data=tot, aes(x=tot$giocate_totali, y = tot$numero_macchine)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Più macchine ci sono più si gioca? Si") +
labs(x="Giocate Totali", y="Numero di Macchine") +
theme_classic() #si
View(tot)
cor(tot$giocate_totali, tot$numero_macchine)
#forse le macchine con più giocate sono quelle più utilizzate?
ggplot(data=set, aes(x=set$giocate_totali, y = set$numero_macchine)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("a settembre, più macchine ci sono più si gioca? Si") +
labs(x="Giocate Totali", y="Numero di Macchine") +
theme_classic() #si
cor(set$giocate_totali,set$numero_macchine)
ggplot(data=set, aes(x= set$Denomination, y=set$giocate_unitarie)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Più monete piccole puoi inserire più giochi? No!") +
labs(x="Wage minimo", y="giocate unitarie") +
theme_classic() #no
cor(set$Denomination, set$giocate_unitarie)
ggplot(data=tot, aes(x= tot$Denomination, y=tot$giocate_unitarie)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Più monete piccole puoi inserire più giochi? No!") +
labs(x="Wage minimo", y="giocate unitarie") +
theme_classic() #no
cor(tot$Denomination, tot$giocate_unitarie)
#forse il numero di giocate dipende dal tema del gioco [video etc...]
ggplot(data=set, aes(x= set$tipo, y=set$giocate_unitarie)) +
geom_bar() +
ggtitle("Più monete piccole puoi inserire più giochi? No!") +
labs(x="Wage minimo", y="giocate unitarie") +
theme_classic() #no
#forse il numero di giocate dipende dal tema del gioco [video etc...]
ggplot(data=set, aes(x= set$tipo, y=set$giocate_unitarie)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Più monete piccole puoi inserire più giochi? No!") +
labs(x="Wage minimo", y="giocate unitarie") +
theme_classic() #no
cor(set$tipo, set$giocate_unitarie)
cor(as.numeric(set$tipo), set$giocate_unitarie)
ggplot(data=set, aes(x= set$Denomination, y=set$giocate_totali)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Più monete piccole puoi inserire più giochi? No!") +
labs(x="Wage minimo", y="giocate unitarie") +
theme_classic() #no
cor(set$Denomination, set$giocate_totali) #no dipendenza lineare
ggplot(data=set, aes(x= set$Denomination, y=set$giocate_unitarie)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Più monete piccole puoi inserire più giochi? No!") +
labs(x="Wage minimo", y="giocate unitarie") +
theme_classic() #no
ggplot(data=set, aes(x= set$MachineType, y=set$giocate_unitarie)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Più monete piccole puoi inserire più giochi? No!") +
labs(x="Wage minimo", y="giocate unitarie") +
theme_classic() #mmm no
#forse il numero di giocate dipende dal tipo di macchina
ggplot(data=set, aes(x= set$MachineType, y=set$giocate_totali)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Più monete piccole puoi inserire più giochi? No!") +
labs(x="Wage minimo", y="giocate unitarie") +
theme_classic()
#forse il numero di giocate dipende dal tipo di macchina
ggplot(data=set, aes(x= set$MachineType, y=set$giocate_unitarie)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Più monete piccole puoi inserire più giochi? No!") +
labs(x="Wage minimo", y="giocate unitarie") +
theme_classic() #mmm no
#forse il numero di giocate dipende dal wage minimo
ggplot(data=set, aes(x= set$Denomination, y=set$giocate_unitarie)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Più monete piccole puoi inserire più giochi? No!") +
labs(x="Wage minimo", y="giocate unitarie") +
theme_classic() #no
#forse il numero di giocate dipende dal tipo di macchina
ggplot(data=set, aes(x= set$MachineType, y=set$giocate_unitarie)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("I tipi di macchina influenzano le giocate? No!") +
labs(x="Wage minimo", y="giocate unitarie") +
theme_classic() #mmm no
#forse il numero di giocate dipende dalla categoria di macchina
ggplot(data=set, aes(x= set$tipo, y=set$giocate_unitarie)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("La categoria della macchina influenza la giocate? No!") +
labs(x="Wage minimo", y="giocate unitarie") +
theme_classic() #mmm no
cor(set$Denomination, set$giocate_totali) #no dipendenza lineare
cor(set$Denomination, set$giocate_unitarie) #no dipendenza lineare
chisq.test(set$MachineType, set$giocate_unitarie)
table(set$MachineType, set$giocate_unitarie)
m = lm (giocate_unitarie ~ MachineType, data = set)
summary(m)
m1 = lm (giocate_unitarie ~ tipo, data = set)
summary(m1)
chisq.test(set$tipo, set$giocate_unitarie)
set$Casino = as.factor(set$Casino)
ggplot(set, aes(x=Casino, y=giocate_unitarie, fill = Casino)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(y = "Giocate unitarie") +
ggtitle("Distribuzione giocate unitarie") +
geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_dark()
ggplot(set, aes(x=Casino, y=giocate_unitarie, fill = Casino)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(y = "Giocate unitarie") +
ggtitle("Distribuzione giocate unitarie settembre") +
geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_dark()
p = ggplot(set, aes(x=Casino, y=giocate_unitarie, fill = Casino)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(y = "Giocate unitarie") +
ggtitle("Distribuzione giocate unitarie settembre") +
geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_dark()
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
data_summary <- function(x) {
"funzione per mettere intervallo di confidenza attorno alla media"
m = mean(x)
ymin = t.test(x)$conf.int[1]
ymax = t.test(x)$conf.int[2]
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
#i due boxplot non sono statisticamente diversi perciò posso adottare la stessa
t.test(set$giocate_unitarie ~ set$Casino)
summary(set$giocate_unitarie)
help(discretize_get_bins())
help("discretize_get_bins")
d_bins = discretize_get_bins(data = set,
inpute = c("giocate_unitarie"),
n_bins = 4)
d_bins = discretize_get_bins(data = set,
inpute = "giocate_unitarie",
n_bins = 4)
d_bins = discretize_get_bins(data = set,
input = "giocate_unitarie",
n_bins = 4)
View(d_bins)
d_bins = discretize_get_bins(data = set,
input = "giocate_unitarie",
n_bins = 5)
View(d_bins)
str(d_bins)
ex = data_frame(variable = "giocate_unitarie",
cuts = paste0("39788","|","79420","|","119536","|","inf"))
View(ex)
View(d_bins)
View(ex)
View(d_bins)
View(ex)
d_bins = discretize_get_bins(data = set,
input = "giocate_unitarie",
n_bins = 3)
View(d_bins)
str(ex)
d_bins = data_frame(variable = "giocate_unitarie",
cuts = paste0("39788","|","79420","|","119536","|","inf"))
rm(ex)
help("discretize_df")
giocate_unitarie_discretizzate = discretize_df(set,
data_bins = d_bins,
stringsAsFactors = T)
View(giocate_unitarie_discretizzate)
rm(giocate_unitarie_discretizzate)
set_discrettizato = discretize_df(set,
data_bins = d_bins,
stringsAsFactors = T)
View(set_discrettizato)
set_discrettizato %>%
group_by(giocate_unitarie) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = median(numero_macchine)) %>%
View()
set_discrettizato %>%
group_by(giocate_unitarie) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
View()
chisq.test(set$giocate_unitarie, set$Denomination)
median()
chisq.test(set$giocate_unitarie, set$tipo)
chisq.test(set$giocate_unitarie, set$MachineType)
chisq.test(set$giocate_unitarie, set$tipo)
#utilizziamo la media tanto per cambiare
set_discrettizato %>%
group_by(giocate_unitarie) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine))$media_macchine
View(set)
length(set$giocate_unitarie)
length(set[,1])
x = data.frame(a = 1:5,)
x = data.frame(a = 1:5)
View(tot)
View(x)
ex = ifelse(x$a == 1, 1, ifelse(x$a ==2, "a", ifelse(x$a = 3, "cacca", 0)))
ex = ifelse(x$a == 1, 1, ifelse(x$a ==2, "a", ifelse(x$a == 3, "cacca", 0)))
rm(ex,a)
for (i in set$giocate_unitarie) {
a = append(a, ifelse(i <= 39788, 1,
ifelse(i > 39788 & i <=79420, 1,
ifelse(i > 79420 & i <= 119536, 1,1))))
}
a = c()
for (i in set$giocate_unitarie) {
a = append(a, ifelse(i <= 39788, 1,
ifelse(i > 39788 & i <=79420, 1,
ifelse(i > 79420 & i <= 119536, 1,1))))
}
a
a = c()
for (i in set$giocate_unitarie) {
a = append(a, ifelse(i <= 39788, 1, 0))
}
a
quantile(set$giocate_unitarie)
l = quantile(set$giocate_unitarie)
x = quantile(set$giocate_unitarie)
x = x[2:5]
a = c()
x = quantile(set$giocate_unitarie)
x = x[2:5]
for (a in x) {}
a = c()
x = quantile(set$giocate_unitarie)
x = x[2:5]
for (a in x) {
for (i in set$giocate_unitarie) {
if (a == x[1]) {
a = append(a, ifelse(i <= a, 1, 0))
}
else { if (a == x[2]) {
a = append(a, ifelse(i > a & i <= x[3]), 1, 0)
}
else { if (a == x[3]){
a = append(a, ifelse(i > a & i<= x[4], 1, 0))
}
else {a = append(a, 1, 0)}
}
}
}
}
a = c()
x = quantile(set$giocate_unitarie)
x = x[2:5]
for (a in x) {
for (i in set$giocate_unitarie) {
if (a == x[1]) {
a = append(a, ifelse(i <= a, 1, 0))
}
else {
if (a == x[2]) {
a = append(a, ifelse(i > a & i <= x[3]), 1, 0)
}
else {
if (a == x[3]) {
a = append(a, ifelse(i > a & i<= x[4], 1, 0))
}
else {
a = append(a, ifelse(i > a, 1, 0))
}
}
}
}
}
warnings()
library(caret)
help("dummyVars")
dummies = predict(dummyVars(~ giocate_unitarie, data = set_discrettizato), newdata = set_discrettizato)
View(dummies)
head(dummies, n = 3)
dummies = t(dummies)
View(dummies)
ex = predict(dummyVars(~Casino, data = set), newdata = set)
ex = t(ex)
#1) vettore di supporto
a = c(ifelse(set$Casino == "Aries", 1, 0), #Voglio tutte le variabili decisionali riferite ad ARIES
ifelse(set$Casino == "Libra", 1, 0)) #VOglio tutte le variabili decisionali riferite a LIBRA
#2) Matrice A del modello
A = matrix(a,
2,
78,
byrow = T)
A == ex
all(A == ex)
all(ex == A)
