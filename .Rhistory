m = sort(unique(ymd(df$Month)))
for(i in 1:12) {
month = df %>% filter(Month == m[i])
test[as.character(m[i])] = t.test(month$giocate_totali, month$Casino)
}
test = list()
m = sort(unique(ymd(df$Month)))
for(i in 1:12) {
month = df %>% filter(Month == m[i])
test[as.character(m[i])] = t.test(month$giocate_totali ~ month$Casino)
}
test
View(test)
test = list()
m = sort(unique(ymd(df$Month)))
for(i in 1:12) {
month = df %>% filter(Month == m[i])
test[as.character(m[i])] = t.test(month$giocate_totali ~ month$Casino)
}
test
library(dplyr)
library(lubridate)
library(funModeling)
library(ggplot2)
options(scipen = 999)
slot <- readxl::read_excel("Lucky Duck Entertainment revenue 2013.xls", na = c(".", "NA", "NaN"))
str(slot)
status = df_status(slot, print_results = F)
sort(unique(slot$Month)) #12 month
knitr::kable(status)
df <- slot %>%
group_by(Month, Casino, Section, MachineType, Denomination) %>%
summarise(numero_macchine    = sum(NoMachines),
ricavi_totali      = sum(GrossRevenue),
ricavo_unitario    = ricavi_totali/numero_macchine,
giocate_totali     = sum(Plays),
giocate_unitarie   = round(giocate_totali/numero_macchine),
ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination) %>%
mutate(tipo = paste0(MachineType, "_", Denomination))
head(df)
cat("Max number of categories:", nrow(df %>%
group_by(tipo) %>%
summarise(n = n())))
knitr::kable(df %>%
group_by(tipo) %>%
summarise(n = n()) %>%
select(tipo))
Casino = df %>% group_by(tipo, Casino) %>%
summarise(n = n()) %>%
arrange(Casino)
cat("Max number of categories for Aries:", nrow(Casino %>% filter(Casino == "Aries")), fill = T)
cat("Max number of categories for Libra:", nrow(Casino %>% filter(Casino == "Libra")))
knitr::kable(df %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Casino, Section) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))))
knitr::kable(df %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Casino, Month) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))))
tre <- df %>% select(Section, tipo, ricavo_unitario)
ggplot(data = tre, aes(x = tre$tipo, y = tre$ricavo_unitario, colour = tre$Section)) +
geom_point( size=4) +
labs(x="Categoria", y="Ricavo unitario", colour = "Sezione")
theme_light()
ricavi_mese = df %>%
group_by(Month) %>%
summarise(ricavo_medio_totale = mean(ricavi_totali),
ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
ggplot(data=ricavi_mese, aes(x=ricavi_mese$Month, y = ricavi_mese$ricavo_medio_unitario)) +
geom_line(alpha=.5, size=1, color="#880011") +
ggtitle("Ricavi per Mese di LDE") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic()
ricavi_mese$Month = as.factor(ricavi_mese$Month)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Pi첫 macchine hai pi첫 guadagni? In linea di massima SI!") +
labs(x="Numero medio macchine", y="Ricavi medi totali") +
theme_minimal()
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_unitario,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Tante macchine non significa ricavi unitari elevati!") +
labs(x="Numero medio macchine", y="Ricavi medi unitari") +
theme_minimal()
ricavi_categoria = df %>%
group_by(Denomination, MachineType) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario)) %>%
mutate(type = paste0(Denomination,sep = "_", MachineType))
ggplot(data=ricavi_categoria, aes(x=ricavi_categoria$type, y = sort(ricavi_categoria$ricavo_medio_unitario))) +
geom_bar(stat="identity", fill = "firebrick3" ) +
ggtitle("Ricavi per Categoria di LDE") +
labs(x="Categoria", y="Ricavo medio unitario") +
theme_classic()
ricavi_sezione = df %>%
group_by(Section) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_sezione, aes(x=ricavi_sezione$Section, y = sort(ricavi_sezione$ricavo_medio_unitario))) +
geom_bar(stat="identity", fill = "forestgreen", width = 0.4 ) +
geom_text(aes(label = round(ricavi_sezione$ricavo_medio_unitario)), nudge_y = 700 ) +
ggtitle("Ricavi per Sezione di LDE") +
labs(x="Sezione", y="Ricavo medio unitario") +
theme_classic()
ricavi_casino = df %>%
group_by(Casino) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_casino, aes(x=ricavi_casino$Casino, y = ricavi_casino$ricavo_medio_unitario)) +
geom_bar(stat="identity", fill = "blue", width = 0.4 ) +
geom_text(aes(label = round(ricavi_casino$ricavo_medio_unitario)), nudge_y = 700 ) +
ggtitle("Ricavi per Casino di LDE") +
labs(x="Casino", y="Ricavo medio unitario") +
theme_classic()
ggplot(data=df, aes(x=df$giocate_totali, y = df$numero_macchine)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Pi첫 macchine ci sono pi첫 si gioca? Si") +
labs(x="Giocate Totali", y="Numero di Macchine") +
theme_classic()
cat("The Correlation between 'Giocate Totali' and 'Numero Macchine' is:",cor(df$giocate_totali, df$numero_macchine))
correlazione = list()
m = sort(unique(ymd(df$Month)))
for(i in 1:12) {
month = df %>% filter(Month == m[i])
correlazione[as.character(m[i])] = cor(month$giocate_totali, month$numero_macchine)
}
correlazione
df$Casino = as.factor(df$Casino)
p = ggplot(df, aes(x=Casino, y=giocate_totali, fill = Casino)) +
geom_boxplot(outlier.shape=8) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali settembre") +
#geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_dark()
data_summary <- function(x) {
"funzione per mettere intervallo di confidenza attorno alla media"
m = mean(x)
ymin = t.test(x)$conf.int[1]
ymax = t.test(x)$conf.int[2]
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
t.test(df$giocate_totali ~ df$Casino) #distribuzioni significativamente diverse: non posso usare la congiunta
x = t.test(df$giocate_totali, df$Casino)
x = t.test(df$giocate_totali~ df$Casino)
View(x)
x$p.value
test = list()
m = sort(unique(ymd(df$Month)))
for(i in 1:12) {
month = df %>% filter(Month == m[i])
x = t.test(month$giocate_totali ~ month$Casino)
test[as.character(m[i])] = x$p.value
}
test
test = list()
m = sort(unique(ymd(df$Month)))
for(i in 1:12) {
month = df %>% filter(Month == m[i])
x = t.test(month$giocate_totali ~ month$Casino)
test[as.character(m[i])] = x$p.value
}
test
test = list()
for(i in 1:12) {
month = df %>% filter(Month == m[i])
x = t.test(month$giocate_totali ~ month$Casino)
test[as.character(m[i])] = x$p.value
}
test
df$Casino = as.factor(df$Casino)
p = ggplot(df, aes(x=Casino, y=giocate_totali, fill = Casino)) +
geom_boxplot(outlier.shape=8) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali") +
#geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_dark()
data_summary <- function(x) {
"funzione per mettere intervallo di confidenza attorno alla media"
m = mean(x)
ymin = t.test(x)$conf.int[1]
ymax = t.test(x)$conf.int[2]
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
t.test(df$giocate_totali ~ df$Casino) #distribuzioni significativamente diverse: non posso usare la congiunta
test = list()
for(i in 1:12) {
month = df %>% filter(Month == m[i])
x = t.test(month$giocate_totali ~ month$Casino)
test[as.character(m[i])] = x$p.value
}
test
test = list()
for(i in 1:12) {
month = df %>% filter(Month == m[i])
x = t.test(month$giocate_totali ~ month$Casino)
test[as.character(m[i])] = x$p.value
}
test
test = list()
for(i in 1:12) {
month = df %>% filter(Month == m[i])
x = t.test(month$giocate_totali ~ month$Casino)
test[as.character(m[i])] = x$p.value
}
test
View(month)
library(tidyverse)
library(lubridate)
library(caret)
library(linprog)
options(scipen = 999)
slot <- readxl::read_excel("data/Lucky Duck Entertainment revenue 2013.xls", na = c(".", "NA", "NaN"))
str(slot)
df <- slot %>%
group_by(Month, Casino, Section, MachineType, Denomination) %>%
summarise(numero_macchine    = sum(NoMachines),
ricavi_totali      = sum(GrossRevenue),
ricavo_unitario    = ricavi_totali/numero_macchine,
giocate_totali     = sum(Plays),
giocate_unitarie   = round(giocate_totali/numero_macchine),
ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination) %>%
mutate(tipo = paste0(MachineType, "_", Denomination))
head(df)
# df %>% ggplot(aes(x = giocate_totali, y = ricavo_per_giocata)) +
#   geom_point()
# df[df$"ricavo_per_giocata" > 5,]
df <- filter(df, Month == ymd("2011-09-01")) #!=
numslots.section <- df %>%
group_by(Month, Casino, Section) %>%
summarise(sum = sum(numero_macchine),
ricavo = sum(ricavi_totali)) %>%
#il mutate perde un livello dopo il summarise
mutate(sum_casino = sum(sum), prop_per_mese = round(sum / sum(sum), 3))
# ggplot(data = numslots.section, aes(x = sum, y = prop_per_mese)) +
#   geom_point(aes(color = Casino, size = ricavo)) +
#   ggtitle("Distribuzione della proporzione del numero di slot sul totale del casino per ogni mese") +
#   xlab("Numero slot per sezione (per mese)") +
#   ylab("Proporzione di slot in ogni mese") #+ facet_wrap(~Section)
#Ottieni numero di slot presenti in ogni casino per mese da usare come upper bound
numslots.casino <- NULL #a cosa serve ?
nslots <- df %>%
group_by(Month, Casino) %>%
summarise(sum = sum(numero_macchine)) %>%
arrange(Month) #ensure order
nslots <- nslots$sum #numero di slot per casino e mese
f.obj <- round(df$ricavo_unitario)
#First create dummy var for Casino and month, used to activate each constraint depending on the casino and month
f.A1 <- t(predict(dummyVars(~ Casino, data = df), newdata = df))
#View(rbind(t(df[, "Casino"]), t(df$Month), f.A)) #Check results
#with one month don't require " : I(factor(Month)" after Casino
#Coefficients
b1 <- nslots #month1-> casino1, month1 ->casino2, month2 -> casino1, ...
f.b1 <-  b1 #vector of right-hand side values - upper bounds of total number of slots per month
f.dir1 <- rep("<=", length(f.b1)) # direction of the inequalities
sol1 <- solveLP(f.obj, f.b1, f.A1, maximum = TRUE, const.dir = f.dir1) #solver
sol1bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A1, const.dir = f.dir1, const.rhs = f.b1)
sol1$con
sol1$solution
f.A2 <- t(predict(dummyVars(~ Section : Casino, data = df), newdata = df))
#with one month don't require " : factor(Month)" after Casino
# Duplicate every row, needed because for each section/month/casino we need a lower and upper bound.
# Retain order --> ob1-low, obs1-up, obs2-low, ...)
f.A2 <- as.tibble(f.A2) %>% slice(rep(1:n(), each = 2)) %>% as.matrix()
#I vincoli sono attivati nel seguente modo
# mese1-casino1-sez1-low,
# mese1-casino1-sez1-up,
# mese1-casino1-sez2;
# mese1-casino2;
# mese2;...
# quindi i primi 8 (4 sez * 2 up/low) vincoli sono associato ad un medesimo upper e lower bound, legato al primo valore di nslots.
#nslots contiene il numero di slot per ogni casino e mese, alternato per casino (mese1 casino1, mese1 casino2, mese2 casino1, ...)
# combine nslots in two columns, where rows are months and columns are casino (first for Aries)
(numslots <- matrix(nslots, ncol = 2, byrow = T))
f.b2 <- c()
month_prop <- numslots.section %>%
group_by(Month, Casino) %>% summarise(prop_min = min(prop_per_mese),
prop_max = max(prop_per_mese))
b2 <- cbind(nslots, month_prop$prop_min, month_prop$prop_max)
colnames(b2) <- NULL #altrimenti errore nel solver
# to check correctness, compare with
#View(numslots.section)
f.b2 <- c()
# probabilmente si puo' fare senza il ciclo for, ma come??
for (i in 1:nrow(b2)) {
f.b2 <- c(f.b2, rep(round(c(b2[i,1]*b2[i,2], b2[i,1]*b2[i,3])), 4))
}
f.dir2 <- rep(c(">=", "<="), length(f.b2)/2) # direction of the inequalities
sol2 <- solveLP(f.obj, f.b2, f.A2, maximum = TRUE, const.dir = f.dir2) #solver
sol2bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A2, const.dir = f.dir2, const.rhs = f.b2)
summary(sol2)
sol2$con
#Calcola i bin per le giocate totali del casino Libra, per differenziare dai bin di Aries
quartili.aries <- c(quantile(df[df$Casino == "Aries", ]$"giocate_totali", probs = seq(0, 1, by = 0.25)))
quartili.libra <- c(quantile(df[df$Casino == "Libra", ]$"giocate_totali", probs = seq(0, 1, by = 0.25)))
#Check dataset ordering --> arrange(Month, Section, MachineType, Denomination, Casino)
head(df, n = 100)
head(arrange(df, Month, Section, MachineType, Denomination, Casino), n = 100) #ok, e' cosi'
# split dataset based on casino, to differentiate bins
aries.idx <- which(df$Casino == "Aries")
aries <- df[aries.idx,]
libra <- df[-aries.idx,]
# Create bins based on total plays, include lowest value, and display digits instead of scientific notation
aries$bin_giocate <- cut(aries$giocate_totali, breaks = quartili.aries, include.lowest = T, dig.lab=10)
libra$bin_giocate <- cut(libra$giocate_totali, breaks = quartili.libra, include.lowest = T, dig.lab=10)
# merge the two casino into the original dataset, with the additional column bin_giocate
df <- rbind(aries, libra) %>% arrange(Month, Section, MachineType, Denomination, Casino)
# reorder columns, set bin_giocate next to giocate_totali
df[c(1:9, 13, 10:12)]
# Confirm ordering is the same as before
all(which(df$Casino == "Aries") == aries.idx)
bin_stats <- df %>%
group_by(bin_giocate, Casino) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine)) %>%
#arrange(Casino, desc(bin_giocate)) #non funziona bene come ordinamento
arrange(Casino, media_macchine) #meglio
#Non funzia
par(mfrow = c(2, 4))
for (b in unique(df$bin_giocate)) {
ggplot(data = df[df$bin_giocate == b,], aes(x = "b", y = numero_macchine)) +
geom_boxplot()
}
par(mfrow = c(1,1))
View(df)
View(bin_stats)
f.A3 <- diag(nrow(df))
f.A3 <- as.tibble(f.A3) %>% slice(rep(1:n(), each = 2)) %>% as.matrix()
b <- c()
for (i in 1:nrow(df)) {
#get the correct row index to identify the bin reference
idx <- match(df[i,"bin_giocate"], bin_stats$bin_giocate)
# create vector of constraint coefficient, lower then upper bounds
b <- append(b, bin_stats[idx, "minimo_macchine"])
b <- append(b, bin_stats[idx, "massimo_macchine"])
}
f.b3 <- unlist(b, use.names=FALSE)
f.dir3 <- rep(c(">=", "<="), dim(df)[1]) # direction of the inequalities
#check if A3 is equal to f.A3 -> all(A3 == f.A3) FALSE
f.A <- rbind(f.A1, f.A2, f.A3)
f.b <- c(f.b1, f.b2, f.b3)
f.dir <- c(f.dir1, f.dir2, f.dir3)
sol <- solveLP(f.obj, f.b, f.A, maximum = TRUE, const.dir = f.dir) #solver
sol.bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A, const.dir = f.dir, const.rhs = f.b)
sol$solution
sol.bis
summary(sol)
shadow_price <- sol$con
vincolo1 <- shadow_price[1:2,]
knitr::kable(vincolo1)
library(dplyr)
library(lubridate)
library(funModeling)
library(ggplot2)
options(scipen = 999)
slot <- readxl::read_excel("Lucky Duck Entertainment revenue 2013.xls", na = c(".", "NA", "NaN"))
str(slot)
status = df_status(slot, print_results = F)
sort(unique(slot$Month)) #12 month
knitr::kable(status)
df <- slot %>%
group_by(Month, Casino, Section, MachineType, Denomination) %>%
summarise(numero_macchine    = sum(NoMachines),
ricavi_totali      = sum(GrossRevenue),
ricavo_unitario    = ricavi_totali/numero_macchine,
giocate_totali     = sum(Plays),
giocate_unitarie   = round(giocate_totali/numero_macchine),
ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination) %>%
mutate(tipo = paste0(MachineType, "_", Denomination))
head(df)
cat("Max number of categories:", nrow(df %>%
group_by(tipo) %>%
summarise(n = n())))
knitr::kable(df %>%
group_by(tipo) %>%
summarise(n = n()) %>%
select(tipo))
Casino = df %>% group_by(tipo, Casino) %>%
summarise(n = n()) %>%
arrange(Casino)
cat(c("Max number of categories for Aries:", nrow(Casino %>% filter(Casino == "Aries")),
"\nMax number of categories for Libra:", nrow(Casino %>% filter(Casino == "Libra"))))
knitr::kable(df %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Casino, Section) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))))
knitr::kable(df %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Casino, Month) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))))
tre <- data %>% select(Section, tipo, ricavo_unitario)
tre <- df %>% select(Section, tipo, ricavo_unitario)
ggplot(data = tre, aes(x = tipo, y = ricavo_unitario, colour = Section)) +
#geom_point(alpha = .6) +
geom_jitter(alpha = .8) +
labs(x="Categoria", y="Ricavo unitario", colour = "Sezione", title = "Distribuzione dei ricavi mensili delle slot per categoria e sezione nei due casino", subtitle = "Casino") +
theme(axis.text.x = element_text(angle = 40, hjust = .8)) +
facet_wrap(~Casino)
#theme_light()
ricavi_mese = df %>%
group_by(Month) %>%
summarise(ricavo_medio_totale = mean(ricavi_totali),
ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
ggplot(data=ricavi_mese, aes(x=ricavi_mese$Month, y = ricavi_mese$ricavo_medio_unitario)) +
geom_line(alpha=.5, size=1, color="#880011") +
ggtitle("Ricavi per Mese di LDE") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic()
ricavi_mese$Month = as.factor(ricavi_mese$Month)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Pi? macchine hai pi? guadagni? In linea di massima SI!") +
labs(x="Numero medio macchine", y="Ricavi medi totali") +
theme_minimal()
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_unitario,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Tante macchine non significa ricavi unitari elevati!") +
labs(x="Numero medio macchine", y="Ricavi medi unitari") +
theme_minimal()
ricavi_categoria = df %>%
group_by(Denomination, MachineType) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario)) %>%
mutate(type = paste0(Denomination,sep = "_", MachineType))
ggplot(data=ricavi_categoria, aes(x=ricavi_categoria$type, y = sort(ricavi_categoria$ricavo_medio_unitario))) +
geom_bar(stat="identity", fill = "firebrick3" ) +
ggtitle("Ricavi per Categoria di LDE") +
labs(x="Categoria", y="Ricavo medio unitario") +
theme_classic()
ricavi_sezione = df %>%
group_by(Section) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_sezione, aes(x=ricavi_sezione$Section, y = sort(ricavi_sezione$ricavo_medio_unitario))) +
geom_bar(stat="identity", fill = "forestgreen", width = 0.4 ) +
geom_text(aes(label = round(ricavi_sezione$ricavo_medio_unitario)), nudge_y = 700 ) +
ggtitle("Ricavi per Sezione di LDE") +
labs(x="Sezione", y="Ricavo medio unitario") +
theme_classic()
ricavi_casino = df %>%
group_by(Casino) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_casino, aes(x=ricavi_casino$Casino, y = ricavi_casino$ricavo_medio_unitario)) +
geom_bar(stat="identity", fill = "blue", width = 0.4 ) +
geom_text(aes(label = round(ricavi_casino$ricavo_medio_unitario)), nudge_y = 700 ) +
ggtitle("Ricavi per Casino di LDE") +
labs(x="Casino", y="Ricavo medio unitario") +
theme_classic()
ggplot(data=df, aes(x=df$giocate_totali, y = df$numero_macchine)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Pi? macchine ci sono pi? si gioca? Si") +
labs(x="Giocate Totali", y="Numero di Macchine") +
theme_classic()
cat("The Correlation between 'Giocate Totali' and 'Numero Macchine' is:",cor(df$giocate_totali, df$numero_macchine))
correlazione = list()
m = sort(unique(ymd(df$Month)))
for(i in 1:12) {
month = df %>% filter(Month == m[i])
correlazione[as.character(m[i])] = cor(month$giocate_totali, month$numero_macchine)
}
correlazione
df$Casino = as.factor(df$Casino)
p = ggplot(df, aes(x=Casino, y=giocate_totali, fill = Casino)) +
geom_boxplot(outlier.shape=8) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali") +
#geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_dark()
data_summary <- function(x) {
"funzione per mettere intervallo di confidenza attorno alla media"
m = mean(x)
ymin = t.test(x)$conf.int[1]
ymax = t.test(x)$conf.int[2]
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
t.test(df$giocate_totali ~ df$Casino) #distribuzioni significativamente diverse: non posso usare la congiunta
test = list()
for(i in 1:12) {
month = df %>% filter(Month == m[i])
x = t.test(month$giocate_totali ~ month$Casino)
test[as.character(m[i])] = x$p.value
}
test
