arrange(Casino, Section) %>%
group_by(Casino, Month) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))))
tre <- df %>% select(Section, tipo, ricavo_unitario)
ggplot(data = tre, aes(x = tre$tipo, y = tre$ricavo_unitario, colour = tre$Section)) +
geom_point( size=4) +
labs(x="Categoria", y="Ricavo unitario", colour = "Sezione")
theme_light()
ricavi_mese = df %>%
group_by(Month) %>%
summarise(ricavo_medio_totale = mean(ricavi_totali),
ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
ggplot(data=ricavi_mese, aes(x=ricavi_mese$Month, y = ricavi_mese$ricavo_medio_unitario)) +
geom_line(alpha=.5, size=1, color="#880011") +
ggtitle("Ricavi per Mese di LDE") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic()
ricavi_mese$Month = as.factor(ricavi_mese$Month)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Pi첫 macchine hai pi첫 guadagni? In linea di massima SI!") +
labs(x="Numero medio macchine", y="Ricavi medi totali") +
theme_minimal()
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_unitario,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Tante macchine non significa ricavi unitari elevati!") +
labs(x="Numero medio macchine", y="Ricavi medi unitari") +
theme_minimal()
ricavi_categoria = df %>%
group_by(Denomination, MachineType) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario)) %>%
mutate(type = paste0(Denomination,sep = "_", MachineType))
ggplot(data=ricavi_categoria, aes(x=ricavi_categoria$type, y = sort(ricavi_categoria$ricavo_medio_unitario))) +
geom_bar(stat="identity", fill = "firebrick3" ) +
ggtitle("Ricavi per Categoria di LDE") +
labs(x="Categoria", y="Ricavo medio unitario") +
theme_classic()
ricavi_sezione = df %>%
group_by(Section) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_sezione, aes(x=ricavi_sezione$Section, y = sort(ricavi_sezione$ricavo_medio_unitario))) +
geom_bar(stat="identity", fill = "forestgreen", width = 0.4 ) +
geom_text(aes(label = round(ricavi_sezione$ricavo_medio_unitario)), nudge_y = 700 ) +
ggtitle("Ricavi per Sezione di LDE") +
labs(x="Sezione", y="Ricavo medio unitario") +
theme_classic()
ricavi_casino = df %>%
group_by(Casino) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_casino, aes(x=ricavi_casino$Casino, y = ricavi_casino$ricavo_medio_unitario)) +
geom_bar(stat="identity", fill = "blue", width = 0.4 ) +
geom_text(aes(label = round(ricavi_casino$ricavo_medio_unitario)), nudge_y = 700 ) +
ggtitle("Ricavi per Casino di LDE") +
labs(x="Casino", y="Ricavo medio unitario") +
theme_classic()
ggplot(data=df, aes(x=df$giocate_totali, y = df$numero_macchine)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Pi첫 macchine ci sono pi첫 si gioca? Si") +
labs(x="Giocate Totali", y="Numero di Macchine") +
theme_classic()
cat("The Correlation between 'Giocate Totali' and 'Numero Macchine' is:",cor(df$giocate_totali, df$numero_macchine))
correlazione = list()
m = sort(unique(ymd(df$Month)))
for(i in 1:12) {
month = df %>% filter(Month == m[i])
correlazione[as.character(m[i])] = cor(month$giocate_totali, month$numero_macchine)
}
correlazione
df$Casino = as.factor(df$Casino)
df$Section = as.factor(df$Section)
p = ggplot(df, aes(x=Casino, y=giocate_totali, fill = Section)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali settembre") +
geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_dark()
data_summary <- function(x) {
"funzione per mettere intervallo di confidenza attorno alla media"
m = mean(x)
ymin = t.test(x)$conf.int[1]
ymax = t.test(x)$conf.int[2]
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
df$Casino = as.factor(df$Casino)
df$Section = as.factor(df$Section)
p = ggplot(df, aes(x=Section, y=giocate_totali, fill = Casino)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali settembre") +
geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_dark()
data_summary <- function(x) {
"funzione per mettere intervallo di confidenza attorno alla media"
m = mean(x)
ymin = t.test(x)$conf.int[1]
ymax = t.test(x)$conf.int[2]
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
df$Casino = as.factor(df$Casino)
df$Section = as.factor(df$Section)
p = ggplot(df, aes(x=Section, y=giocate_totali, fill = Casino)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali settembre") +
theme_dark()
data_summary <- function(x) {
"funzione per mettere intervallo di confidenza attorno alla media"
m = mean(x)
ymin = t.test(x)$conf.int[1]
ymax = t.test(x)$conf.int[2]
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
df$Casino = as.factor(df$Casino)
df$Section = as.factor(df$Section)
p = ggplot(df, aes(x=Section, y=giocate_totali, fill = Casino)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali settembre") +
theme_dark()
data_summary <- function(x) {
"funzione per mettere intervallo di confidenza attorno alla media"
m = mean(x)
ymin = t.test(x)$conf.int[1]
ymax = t.test(x)$conf.int[2]
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
df$Casino = as.factor(df$Casino)
df$Section = as.factor(df$Section)
p = ggplot(df, aes(x=Casino, y=giocate_totali, fill = Section)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali settembre") +
theme_dark()
data_summary <- function(x) {
"funzione per mettere intervallo di confidenza attorno alla media"
m = mean(x)
ymin = t.test(x)$conf.int[1]
ymax = t.test(x)$conf.int[2]
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
df$Casino = as.factor(df$Casino)
df$Section = as.factor(df$Section)
p = ggplot(df, aes(x=Casino, y=giocate_totali, fill = Section)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali settembre") +
theme_dark()
p
df$Casino = as.factor(df$Casino)
df$Section = as.factor(df$Section)
p = ggplot(df, aes(x=Casino, y=giocate_totali, fill = Section)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali") +
theme_dark()
p
df$Casino = as.factor(df$Casino)
df$Section = as.factor(df$Section)
p = ggplot(df, aes(x=Section, y=giocate_totali, fill=Casino)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali") +
theme_dark()
p
df$Casino = as.factor(df$Casino)
df$Section = as.factor(df$Section)
p = ggplot(df, aes(x=Casino, y=giocate_totali, fill=Section)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali") +
theme_dark()
p
df$Casino = as.factor(df$Casino)
p = ggplot(df, aes(x=Casino, y=giocate_totali, fill = Casino)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali settembre") +
geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_dark()
data_summary <- function(x) {
"funzione per mettere intervallo di confidenza attorno alla media"
m = mean(x)
ymin = t.test(x)$conf.int[1]
ymax = t.test(x)$conf.int[2]
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
t.test(df$giocate_totali ~ df$Casino) #distribuzioni significativamente diverse: non posso usare la congiunta
df$Casino = as.factor(df$Casino)
p = ggplot(df, aes(x=Casino, y=giocate_totali, fill = Casino)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali settembre") +
geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_dark()
data_summary <- function(x) {
"funzione per mettere intervallo di confidenza attorno alla media"
m = mean(x)
ymin = t.test(x)$conf.int[1]
ymax = t.test(x)$conf.int[2]
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
t.test(df$giocate_totali ~ df$Casino) #distribuzioni significativamente diverse: non posso usare la congiunta
df$Casino = as.factor(df$Casino)
p = ggplot(df, aes(x=Casino, y=giocate_totali, fill = Casino)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali settembre") +
#geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_dark()
data_summary <- function(x) {
"funzione per mettere intervallo di confidenza attorno alla media"
m = mean(x)
ymin = t.test(x)$conf.int[1]
ymax = t.test(x)$conf.int[2]
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
t.test(df$giocate_totali ~ df$Casino) #distribuzioni significativamente diverse: non posso usare la congiunta
df$Casino = as.factor(df$Casino)
p = ggplot(df, aes(x=Casino, y=giocate_totali, fill = Casino)) +
geom_boxplot(outlier.shape=8) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali settembre") +
#geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_dark()
data_summary <- function(x) {
"funzione per mettere intervallo di confidenza attorno alla media"
m = mean(x)
ymin = t.test(x)$conf.int[1]
ymax = t.test(x)$conf.int[2]
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
t.test(df$giocate_totali ~ df$Casino) #distribuzioni significativamente diverse: non posso usare la congiunta
test = list()
m = sort(unique(ymd(df$Month)))
for(i in 1:12) {
month = df %>% filter(Month == m[i])
test[as.character(m[i])] = t.test(month$giocate_totali, month$Casino)
}
test = list()
m = sort(unique(ymd(df$Month)))
for(i in 1:12) {
month = df %>% filter(Month == m[i])
test[as.character(m[i])] = t.test(month$giocate_totali ~ month$Casino)
}
test
View(test)
test = list()
m = sort(unique(ymd(df$Month)))
for(i in 1:12) {
month = df %>% filter(Month == m[i])
test[as.character(m[i])] = t.test(month$giocate_totali ~ month$Casino)
}
test
library(dplyr)
library(lubridate)
library(funModeling)
library(ggplot2)
options(scipen = 999)
slot <- readxl::read_excel("Lucky Duck Entertainment revenue 2013.xls", na = c(".", "NA", "NaN"))
str(slot)
status = df_status(slot, print_results = F)
sort(unique(slot$Month)) #12 month
knitr::kable(status)
df <- slot %>%
group_by(Month, Casino, Section, MachineType, Denomination) %>%
summarise(numero_macchine    = sum(NoMachines),
ricavi_totali      = sum(GrossRevenue),
ricavo_unitario    = ricavi_totali/numero_macchine,
giocate_totali     = sum(Plays),
giocate_unitarie   = round(giocate_totali/numero_macchine),
ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination) %>%
mutate(tipo = paste0(MachineType, "_", Denomination))
head(df)
cat("Max number of categories:", nrow(df %>%
group_by(tipo) %>%
summarise(n = n())))
knitr::kable(df %>%
group_by(tipo) %>%
summarise(n = n()) %>%
select(tipo))
Casino = df %>% group_by(tipo, Casino) %>%
summarise(n = n()) %>%
arrange(Casino)
cat("Max number of categories for Aries:", nrow(Casino %>% filter(Casino == "Aries")), fill = T)
cat("Max number of categories for Libra:", nrow(Casino %>% filter(Casino == "Libra")))
knitr::kable(df %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Casino, Section) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))))
knitr::kable(df %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Casino, Month) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))))
tre <- df %>% select(Section, tipo, ricavo_unitario)
ggplot(data = tre, aes(x = tre$tipo, y = tre$ricavo_unitario, colour = tre$Section)) +
geom_point( size=4) +
labs(x="Categoria", y="Ricavo unitario", colour = "Sezione")
theme_light()
ricavi_mese = df %>%
group_by(Month) %>%
summarise(ricavo_medio_totale = mean(ricavi_totali),
ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
ggplot(data=ricavi_mese, aes(x=ricavi_mese$Month, y = ricavi_mese$ricavo_medio_unitario)) +
geom_line(alpha=.5, size=1, color="#880011") +
ggtitle("Ricavi per Mese di LDE") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic()
ricavi_mese$Month = as.factor(ricavi_mese$Month)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Pi첫 macchine hai pi첫 guadagni? In linea di massima SI!") +
labs(x="Numero medio macchine", y="Ricavi medi totali") +
theme_minimal()
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_unitario,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Tante macchine non significa ricavi unitari elevati!") +
labs(x="Numero medio macchine", y="Ricavi medi unitari") +
theme_minimal()
ricavi_categoria = df %>%
group_by(Denomination, MachineType) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario)) %>%
mutate(type = paste0(Denomination,sep = "_", MachineType))
ggplot(data=ricavi_categoria, aes(x=ricavi_categoria$type, y = sort(ricavi_categoria$ricavo_medio_unitario))) +
geom_bar(stat="identity", fill = "firebrick3" ) +
ggtitle("Ricavi per Categoria di LDE") +
labs(x="Categoria", y="Ricavo medio unitario") +
theme_classic()
ricavi_sezione = df %>%
group_by(Section) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_sezione, aes(x=ricavi_sezione$Section, y = sort(ricavi_sezione$ricavo_medio_unitario))) +
geom_bar(stat="identity", fill = "forestgreen", width = 0.4 ) +
geom_text(aes(label = round(ricavi_sezione$ricavo_medio_unitario)), nudge_y = 700 ) +
ggtitle("Ricavi per Sezione di LDE") +
labs(x="Sezione", y="Ricavo medio unitario") +
theme_classic()
ricavi_casino = df %>%
group_by(Casino) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_casino, aes(x=ricavi_casino$Casino, y = ricavi_casino$ricavo_medio_unitario)) +
geom_bar(stat="identity", fill = "blue", width = 0.4 ) +
geom_text(aes(label = round(ricavi_casino$ricavo_medio_unitario)), nudge_y = 700 ) +
ggtitle("Ricavi per Casino di LDE") +
labs(x="Casino", y="Ricavo medio unitario") +
theme_classic()
ggplot(data=df, aes(x=df$giocate_totali, y = df$numero_macchine)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Pi첫 macchine ci sono pi첫 si gioca? Si") +
labs(x="Giocate Totali", y="Numero di Macchine") +
theme_classic()
cat("The Correlation between 'Giocate Totali' and 'Numero Macchine' is:",cor(df$giocate_totali, df$numero_macchine))
correlazione = list()
m = sort(unique(ymd(df$Month)))
for(i in 1:12) {
month = df %>% filter(Month == m[i])
correlazione[as.character(m[i])] = cor(month$giocate_totali, month$numero_macchine)
}
correlazione
df$Casino = as.factor(df$Casino)
p = ggplot(df, aes(x=Casino, y=giocate_totali, fill = Casino)) +
geom_boxplot(outlier.shape=8) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali settembre") +
#geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_dark()
data_summary <- function(x) {
"funzione per mettere intervallo di confidenza attorno alla media"
m = mean(x)
ymin = t.test(x)$conf.int[1]
ymax = t.test(x)$conf.int[2]
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
t.test(df$giocate_totali ~ df$Casino) #distribuzioni significativamente diverse: non posso usare la congiunta
x = t.test(df$giocate_totali, df$Casino)
x = t.test(df$giocate_totali~ df$Casino)
View(x)
x$p.value
test = list()
m = sort(unique(ymd(df$Month)))
for(i in 1:12) {
month = df %>% filter(Month == m[i])
x = t.test(month$giocate_totali ~ month$Casino)
test[as.character(m[i])] = x$p.value
}
test
test = list()
m = sort(unique(ymd(df$Month)))
for(i in 1:12) {
month = df %>% filter(Month == m[i])
x = t.test(month$giocate_totali ~ month$Casino)
test[as.character(m[i])] = x$p.value
}
test
test = list()
for(i in 1:12) {
month = df %>% filter(Month == m[i])
x = t.test(month$giocate_totali ~ month$Casino)
test[as.character(m[i])] = x$p.value
}
test
df$Casino = as.factor(df$Casino)
p = ggplot(df, aes(x=Casino, y=giocate_totali, fill = Casino)) +
geom_boxplot(outlier.shape=8) +
labs(y = "Giocate totali") +
ggtitle("Distribuzione giocate totali") +
#geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_dark()
data_summary <- function(x) {
"funzione per mettere intervallo di confidenza attorno alla media"
m = mean(x)
ymin = t.test(x)$conf.int[1]
ymax = t.test(x)$conf.int[2]
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
t.test(df$giocate_totali ~ df$Casino) #distribuzioni significativamente diverse: non posso usare la congiunta
test = list()
for(i in 1:12) {
month = df %>% filter(Month == m[i])
x = t.test(month$giocate_totali ~ month$Casino)
test[as.character(m[i])] = x$p.value
}
test
test = list()
for(i in 1:12) {
month = df %>% filter(Month == m[i])
x = t.test(month$giocate_totali ~ month$Casino)
test[as.character(m[i])] = x$p.value
}
test
test = list()
for(i in 1:12) {
month = df %>% filter(Month == m[i])
x = t.test(month$giocate_totali ~ month$Casino)
test[as.character(m[i])] = x$p.value
}
test
View(month)
