ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination) %>%
mutate(tipo = paste0(MachineType, "_", Denomination))
tot = as.data.frame(tot)
ricavi_mese = tot %>%
group_by(Month) %>%
summarise(ricavo_medio_totale = mean(ricavi_totali),
ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
ggplot(data=ricavi_mese, aes(x=ricavi_mese$Month, y = ricavi_mese$ricavo_medio_unitario)) +
geom_line(alpha=.5, size=1, color="#880011") +
ggtitle("Ricavi per Mese di LDE") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic()
ricavi_mese$Month = as.factor(ricavi_mese$Month)
#NOTA: non ho idea se abbia più senso mettere i ricavi medi unitari (grafico 1) o i ricavi medi totali (grafico 2)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Più macchine hai più guadagni? In linea di massima SI!") +
labs(x="Numero medio macchine", y="Ricavi medi totali") +
theme_minimal()
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_unitario,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Tante macchine non significa ricavi unitari elevati!") +
labs(x="Numero medio macchine", y="Ricavi medi unitari") +
theme_minimal()
ricavi_categoria = tot %>%
group_by(Denomination, MachineType) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario)) %>%
mutate(type = paste0(Denomination,sep = "_", MachineType))
ggplot(data=ricavi_categoria, aes(x=ricavi_categoria$type, y = ricavi_categoria$ricavo_medio_unitario)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Categoria di LDE") +
labs(x="Categoria", y="Ricavo medio unitario") +
theme_classic()
ricavi_sezione = tot %>%
group_by(Section) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_sezione, aes(x=ricavi_sezione$Section, y = ricavi_sezione$ricavo_medio_unitario)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Sezione di LDE") +
labs(x="Sezione", y="Ricavo medio unitario") +
theme_classic()
ricavi_casino = tot %>%
group_by(Casino) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_casino, aes(x=ricavi_casino$Casino, y = ricavi_casino$ricavo_medio_unitario)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Casino di LDE") +
labs(x="Casino", y="Ricavo medio unitario") +
theme_classic()
tot %>%
group_by(tipo) %>%
summarise(n = n()) %>%
View()#14 categorie al massimo
tot %>%
group_by(Casino,Section, Month) %>%
summarise(n =n()) %>%
View()
tot %>% group_by(Casino, tipo, Section, Month) %>%
summarise(n = n()) %>%
arrange(tipo, Section) %>%
group_by(Section) %>%
summarise(n = n()) %>%
View()#numero categorie per sezione di LDE
set = tot %>%
filter(Month == ymd("2011-09-01")) %>%
arrange(Casino)
set = as.data.frame(set)
f_obj = round(set$ricavo_unitario) #ricavi unitari = da MAX
library(caret)
Vincolo1 =  function(df){
"dummy + trasposizione"
A = predict(dummyVars(~ Casino, data = df), newdata = df)
A = t(A)
return(A)
} #approccio valido se ho una sola colonna
A = Vincolo1(set)
#Vettore B del modello lineare
b = c(849, 230) #upper bound
constraints = c("<=", "<=")
library(linprog)
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints) #solver
#risultato 1
summary(sol)
shadow_price = sol$con
#risultato sul dataset
set[which(sol$solution != 0),] %>%
arrange(Casino, tipo) %>%
View()
#Matrice A:
#1) creo un vettore di 1 e di 0 -> dove le variabilid decisionali sono attive varrà 1 altrimenti 0;
#2) popolo la matrice A (modello lineare) attraverso il vettore creato
Vincolo2 = function(df){
"funzione per costruire il vincolo 2"
x = unique(df$Section)
y = unique(df$Casino)
a = c()
for (t in 1:length(y)) {
for (i in 1:length(x)) {
for (k in 1:2) {
a = append(a, ifelse(df$Section == x[i] & df$Casino == y[t], 1, 0))
}
}
}
A = matrix(a,16,78, byrow = T)
return(A)
}
#Vincolo 2
A1 = Vincolo2(set)
#Vincolo 1 e Vincolo 2 (Matrice A)
A = rbind(A, A1)
#Vettore B
b = c(b,
rep(1,27)) #mettiamo 1 simbolicamente [ha poco senso avere una categoria con una sola macchina
constraints = c(constraints,
rep(">=", 27))
#Risultato 3
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
################################################################
# STRATEGIA 2: OTTIMIZZO MESE PER MESE MA PER ENTRAMBI I CASINO
###############################################################
options(scipen = 999)
library(rstudioapi)
#Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
print(getwd())
library(readxl)
slot = read_excel("Lucky Duck Entertainment revenue 2013.xls", na = c(".", "NA", "NaN"))
library(funModeling)
library(dplyr)
library(lubridate)
#status
status = df_status(slot, print_results = F)
summary(slot$Month) #12 mesi
tot = slot %>%
group_by(Casino, Denomination, MachineType, Section, Month) %>%
summarise(numero_macchine = sum(NoMachines),
ricavi_totali = sum(GrossRevenue),
ricavo_unitario = ricavi_totali/numero_macchine,
giocate_totali = sum(Plays),
giocate_unitarie = round(giocate_totali/numero_macchine),
ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination) %>%
mutate(tipo = paste0(MachineType, "_", Denomination))
tot = as.data.frame(tot)
ricavi_mese = tot %>%
group_by(Month) %>%
summarise(ricavo_medio_totale = mean(ricavi_totali),
ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
ggplot(data=ricavi_mese, aes(x=ricavi_mese$Month, y = ricavi_mese$ricavo_medio_unitario)) +
geom_line(alpha=.5, size=1, color="#880011") +
ggtitle("Ricavi per Mese di LDE") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic()
ricavi_mese$Month = as.factor(ricavi_mese$Month)
#NOTA: non ho idea se abbia più senso mettere i ricavi medi unitari (grafico 1) o i ricavi medi totali (grafico 2)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Più macchine hai più guadagni? In linea di massima SI!") +
labs(x="Numero medio macchine", y="Ricavi medi totali") +
theme_minimal()
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_unitario,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Tante macchine non significa ricavi unitari elevati!") +
labs(x="Numero medio macchine", y="Ricavi medi unitari") +
theme_minimal()
ricavi_categoria = tot %>%
group_by(Denomination, MachineType) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario)) %>%
mutate(type = paste0(Denomination,sep = "_", MachineType))
ggplot(data=ricavi_categoria, aes(x=ricavi_categoria$type, y = ricavi_categoria$ricavo_medio_unitario)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Categoria di LDE") +
labs(x="Categoria", y="Ricavo medio unitario") +
theme_classic()
ricavi_sezione = tot %>%
group_by(Section) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_sezione, aes(x=ricavi_sezione$Section, y = ricavi_sezione$ricavo_medio_unitario)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Sezione di LDE") +
labs(x="Sezione", y="Ricavo medio unitario") +
theme_classic()
ricavi_casino = tot %>%
group_by(Casino) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_casino, aes(x=ricavi_casino$Casino, y = ricavi_casino$ricavo_medio_unitario)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Casino di LDE") +
labs(x="Casino", y="Ricavo medio unitario") +
theme_classic()
set = tot %>%
filter(Month == ymd("2011-09-01")) %>%
arrange(Casino)
set = as.data.frame(set)
f_obj = round(set$ricavo_unitario) #ricavi unitari = da MAX
#quante macchine ci sono ogni mese nei 2 casino?
tot %>%
group_by(Casino, Month) %>%
summarise(n_macchine = sum(numero_macchine)) %>%
arrange(Month) %>%
View()
library(caret)
Vincolo1 =  function(df){
"dummy + trasposizione"
A = predict(dummyVars(~ Casino, data = df), newdata = df)
A = t(A)
return(A)
} #approccio valido se ho una sola colonna
A = Vincolo1(set)
#Vettore B del modello lineare
b = c(849, 230) #upper bound
constraints = c("<=", "<=")
library(linprog)
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints) #solver
#risultato 1
summary(sol)
shadow_price = sol$con
#Matrice A:
#1) creo un vettore di 1 e di 0 -> dove le variabilid decisionali sono attive varrà 1 altrimenti 0;
#2) popolo la matrice A (modello lineare) attraverso il vettore creato
Vincolo2 = function(df){
"funzione per costruire il vincolo 2"
x = unique(df$Section)
y = unique(df$Casino)
a = c()
for (t in 1:length(y)) {
for (i in 1:length(x)) {
for (k in 1:2) {
a = append(a, ifelse(df$Section == x[i] & df$Casino == y[t], 1, 0))
}
}
}
A = matrix(a,16,78, byrow = T)
return(A)
}
#Vincolo 2
A1 = Vincolo2(set)
#Vincolo 1 e Vincolo 2 (Matrice A)
A = rbind(A, A1)
#Vettore B aggiornato
b = c(b,
rep(c(round(0.2*849), round(0.3*849)), 4), rep(c(round(0.15*230), round(0.35*230)), 4))
constraints = c(constraints,
rep(c(">=", "<="), 8))
#Risultato 2
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
shadow_price = sol$con
#risultato sul dataset
set[which(sol$solution != 0),] %>%
arrange(Casino, tipo) %>%
View()
255+254+170+170
255/849
254/849
80+36+34+80
80/230
#forse le macchine con più giocate sono quelle più utilizzate?
ggplot(data=set, aes(x=set$giocate_totali, y = set$numero_macchine)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("a settembre, più macchine ci sono più si gioca? Si") +
labs(x="Giocate Totali", y="Numero di Macchine") +
theme_classic() #si
cor(set$giocate_totali,set$numero_macchine) #0.97 ho scoperto l'acqua calda
#ma è vero per per tutto l'anno?
ggplot(data=tot, aes(x=tot$giocate_totali, y = tot$numero_macchine)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Più macchine ci sono più si gioca? Si") +
labs(x="Giocate Totali", y="Numero di Macchine") +
theme_classic() #si
cor(tot$giocate_totali, tot$numero_macchine) #0.93 ho scoperto l'acqua calda
#forse il numero di giocate dipende dal wage minimo
ggplot(data=set, aes(x= set$Denomination, y=set$giocate_totali)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Più monete piccole puoi inserire più giochi? No!") +
labs(x="Wage minimo", y="giocate totali") +
theme_classic() #ni
cor(set$Denomination, set$giocate_totali) #bassa dipendenza lineare [non vale la pena]
set$Casino = as.factor(set$Casino)
p = ggplot(set, aes(x=Casino, y=giocate_totali, fill = Casino)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(y = "Giocate toali") +
ggtitle("Distribuzione giocate totali settembre") +
geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_dark()
data_summary <- function(x) {
"funzione per mettere intervallo di confidenza attorno alla media"
m = mean(x)
ymin = t.test(x)$conf.int[1]
ymax = t.test(x)$conf.int[2]
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data = data_summary,
geom="pointrange",
color="red",
size = 0.7)
t.test(set$giocate_totali ~ set$Casino)
summary(set[set$Casino == "Aries", "giocate_totali"])
summary(set[set$Casino == "Libra", "giocate_totali"])
#dataframe in input per la discretizzaztione;
#si può usare "discretize_get_bins" ma non permette il settaggio con i quantili
#il risultato sarebbe lo stesso daframe con valori chiaramenti diversi
d_bins = data_frame(variable = "giocate_totali",
cuts = paste0("122810","|","601962","|","1665180","|","inf"))
aries_discrettizato = discretize_df(set %>% filter(Casino=="Aries"),
data_bins = d_bins,
stringsAsFactors = T)
d_bins1 = data_frame(variable = "giocate_totali",
cuts = paste0("80424","|","209740","|","617728","|","inf"))
libra_discrettizato = discretize_df(set %>% filter(Casino=="Libra"),
data_bins = d_bins1,
stringsAsFactors = T)
set_discretizzato = rbind(aries_discrettizato, libra_discrettizato)
View(set_discretizzato)
View(set)
#ora raggruppo per giocate_unitarie che sono state discretizzate e calcolo alcune statistiche per decidere la soglia
set_discretizzato %>%
group_by(giocate_totali, Casino) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
arrange(Casino) %>%
View()
Vincolo4 = function(df) {
A = predict(dummyVars(~ giocate_totali, data = df), newdata = df)
A = t(A)
return(A)
}
#Vincolo 4
A2 = Vincolo4(set)
View(A2)
View(A2)
View(A2)
test = predict(dummyVars(~ giocate_totali, data = set), newdata = set)
View(test)
test = predict(dummyVars(~ as.character(giocate_totali), data = set), newdata = set)
View(test)
test = t(test)
View(test)
test = t(test)
View(test)
View(set_discretizzato)
all(set$numero_macchine == set_discretizzato$numero_macchine)
set$giocate_totali_discr = set_discretizzato$giocate_totali
set = set[c(1:9,22,10:21),]
set = tot %>%
filter(Month == ymd("2011-09-01")) %>%
arrange(Casino)
set = as.data.frame(set)
set$giocate_totali_discr = set_discretizzato$giocate_totali
set = set[c(1:9,13,10:12)]
#ora raggruppo per giocate_unitarie che sono state discretizzate e calcolo alcune statistiche per decidere la soglia
set %>%
group_by(giocate_totali_discr, Casino) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
arrange(Casino) %>%
View()
#ora raggruppo per giocate_unitarie che sono state discretizzate e calcolo alcune statistiche per decidere la soglia
set_discretizzato %>%
group_by(giocate_totali_discr, Casino) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
arrange(Casino) %>%
View()
#ora raggruppo per giocate_unitarie che sono state discretizzate e calcolo alcune statistiche per decidere la soglia
set_discretizzato %>%
group_by(giocate_totali, Casino) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
arrange(Casino) %>%
View()
#ora raggruppo per giocate_unitarie che sono state discretizzate e calcolo alcune statistiche per decidere la soglia
set  %>%
group_by(giocate_totali, Casino) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
arrange(Casino) %>%
View()
#ora raggruppo per giocate_unitarie che sono state discretizzate e calcolo alcune statistiche per decidere la soglia
set %>%
group_by(giocate_totali, Casino) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
arrange(Casino) %>%
View()
#ora raggruppo per giocate_unitarie che sono state discretizzate e calcolo alcune statistiche per decidere la soglia
set %>%
group_by(giocate_totali_discr, Casino) %>%
summarise(media_macchine = mean(numero_macchine),
massimo_macchine = max(numero_macchine),
mediana_macchine = median(numero_macchine)) %>%
arrange(Casino) %>%
View()
test = predict(dummyVars(~ giocate_totali_discr, data = set), newdata = set)
test = t(test)
test = predict(dummyVars(~ giocate_totali, data = set), newdata = set)
help("dummyVars")
set$giocate_totali = as.factor(set$giocate_totali)
test = predict(dummyVars(~ giocate_totali, data = set), newdata = set)
View(set)
test = t(test)
View(test)
test = t(test)
View(test)
rm(test)
#utilizziamo il massimo numero di macchine
set$giocate_totali = as.numeric(set$giocate_totali)
summary(set$giocate_totali)
str(set$giocate_totali)
class(set$giocate_totali)
Vincolo4 = function(df) {
df$giocate_totali = as.factor(df$giocate_totali)
A = predict(dummyVars(~ giocate_totali, data = df), newdata = df)
A = t(A)
return(A)
}
#Vincolo 4
A2 = Vincolo4(set)
View(A2)
Vincolo4 = function(df) {
df$giocate_totali = as.factor(df$giocate_totali)
A = predict(dummyVars(~ giocate_totali, data = df), newdata = df)
return(A)
}
#Vincolo 4
A2 = Vincolo4(set)
Vincolo4 = function(df) {
df$giocate_totali = as.character(df$giocate_totali)
A = predict(dummyVars(~ giocate_totali, data = df), newdata = df)
return(A)
}
#Vincolo 4
A2 = Vincolo4(set)
View(A2)
str(set)
A2$discretizzazione = set$giocate_totali_discr
View(A2)
#Vincolo 4
A2 = Vincolo4(set)
A2 = as.data.frame(A2)
View(A2)
A2$discretizzazione = set$giocate_totali_discr
View(A2)
View(A2)
View(set)
set = tot %>%
filter(Month == ymd("2011-09-01")) %>%
arrange(Casino)
View(set)
View(set_discretizzato)
test =predict(dummyVars(~ giocate_totali, data = set_discretizzato, drop2nd = F), newdata = set_discretizzato)
View(test)
rm(test)
View(set)
View(set_discretizzato)
set$giocate_totali_discr = set_discretizzato$giocate_totali
set = set[c(1:9,13,10:12)] #riordino colonne
diag(78)
prova = diag(78)
View(prova)
f = diag(2)
f
f[-1,]
rm(f)
prova = prova[rep(seq_len(nrow(prova)), each= 2),]
View(prova)
prova[,79] = set$giocate_totali_discr
#1 creo una mtrice diagonale 78 x 78: si adatta alla selezione delle nostre variabili
prova = diag(78)
prova[,79] = set$giocate_totali_discr
prova = cbind(prova, set$giocate_totali_discr)
View(prova)
View(prova)
View(prova)
View(libra_discrettizato)
View(set_discretizzato)
prova = cbind(prova, as.character(set$giocate_totali_discr))
View(prova)
#1 creo una mtrice diagonale 78 x 78: si adatta alla selezione delle nostre variabili
prova = diag(78)
prova = cbind(prova, as.character(set$giocate_totali_discr))
#2replico ciascuna riga a priori
prova = prova[rep(seq_len(nrow(prova)), each= 2),]
View(prova)
}
}
View(prova)
#3 elimino le righe che non dovrebbero essere doppie poichè hanno solamente un lower bound
for (i in 1:length(prova[,1]) i
#3 elimino le righe che non dovrebbero essere doppie poichè hanno solamente un lower bound
for (i in 1:length(prova[,1]) {i}
