arrange(tipo, Section) %>%
group_by(Section) %>%
summarise(n = n()) %>%
View() #Nelle sezioni le categorie sono le stesse per tutto l'anno  = Ha senso questo raggruppamento
tot %>% group_by(Casino, tipo, Section) %>%
summarise(n = n()) %>%
arrange(tipo, Section) %>%
group_by(Section) %>%
summarise(n = n()) %>%
View() #Nelle sezioni le categorie sono le stesse per tutto l'anno  = Ha senso questo raggruppamento
22+25+26+25
tot %>% group_by(Section, Month) %>%
summarise(n = n()) %>%
arrange(Section) %>%
View()
tot %>%
group_by(Casino,Section, Month) %>%
summarise(n =n()) %>%
View()
tot %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Section) %>%
group_by(Section) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_categorie = sqrt(var(n))) %>%
View() #questo è da sistemare mi sa
tot %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Casino, Section) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_categorie = sqrt(var(n))) %>%
View() #questo è da sistemare mi sa
df = d_aries %>%
group_by(Denomination, MachineType, Section, Month) %>%
summarise(numero_macchine = sum(NoMachines),
ricavi_totali = sum(GrossRevenue),
ricavo_unitario = ricavi_totali/numero_macchine,
giocate_totali = sum(Plays),
giocate_unitarie = round(giocate_totali/numero_macchine),
ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination) %>%
mutate(tipo = paste0(MachineType, "_", Denomination))
#aries
d_aries = d %>%
filter(Casino == "Aries")
#aries
d_aries = slot %>%
filter(Casino == "Aries")
df = d_aries %>%
group_by(Denomination, MachineType, Section, Month) %>%
summarise(numero_macchine = sum(NoMachines),
ricavi_totali = sum(GrossRevenue),
ricavo_unitario = ricavi_totali/numero_macchine,
giocate_totali = sum(Plays),
giocate_unitarie = round(giocate_totali/numero_macchine),
ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination) %>%
mutate(tipo = paste0(MachineType, "_", Denomination))
df %>% group_by(Section, Month) %>%
summarise(n = n()) %>%
arrange(Section) %>%
group_by(Section) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_categorie = sqrt(var(n))) %>%
View()
tot %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Casino, Section) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_categorie = sqrt(var(n))) %>%
View()
tot %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Month) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_categorie = sqrt(var(n))) %>%
View() #anche questo
tot %>%
group_by(tipo) %>%
summarise(n = n()) %>%
View()#14 categorie al massimo
tot %>%
group_by(Casino,Section, Month) %>%
summarise(n =n()) %>%
View()
tot %>% group_by(Casino, tipo, Section) %>%
summarise(n = n()) %>%
arrange(tipo, Section) %>%
group_by(Section) %>%
summarise(n = n()) %>%
View() #Modifica
tot %>% group_by(Casino, tipo, Section, Month) %>%
summarise(n = n()) %>%
arrange(tipo, Section) %>%
group_by(Section) %>%
summarise(n = n()) %>%
View()
tot %>% group_by(Casino, tipo, Section) %>%
summarise(n = n()) %>%
arrange(tipo, Section) %>%
group_by(Section) %>%
summarise(n = n()) %>%
View() #Modifica
tot %>% group_by(Casino, tipo, Section) %>%
summarise(n = n()) %>%
View()
ricavi_mese = tot %>%
group_by(Month, Casino) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
View(ricavi_mese)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$Month, y = ricavi_mese$ricavo_medio_unitario)) +
geom_line(alpha=.5, size=1, color="#880011") +
ggtitle("Ricavi per Mese") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic() #non è un andamento lineare!
ricavi_mese = tot %>%
group_by(Month) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
ggplot(data=ricavi_mese, aes(x=ricavi_mese$Month, y = ricavi_mese$ricavo_medio_unitario)) +
geom_line(alpha=.5, size=1, color="#880011") +
ggtitle("Ricavi per Mese") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic() #non è un andamento lineare!
tot %>% group_by(Casino, tipo, Section, Month) %>%
summarise(n = n()) %>%
arrange(tipo, Section) %>%
group_by(Section) %>%
summarise(n = n()) %>%
View()
tot %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Casino, Section) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_categorie = sqrt(var(n))) %>%
View()
tot %>% group_by(Casino, tipo, Section) %>%
summarise(n = n()) %>%
View()
tot %>% group_by(Casino, tipo, Section) %>%
summarise(n = n()) %>%
arrange(tipo, Section) %>%
group_by(Section) %>%
summarise(n = n()) %>%
View() #Modifica
set = tot %>%
filter(Month == ymd("2011-09-01")) %>%
arrange(Casino)
View(set)
f_obj = round(set$ricavo_unitario) #ricavi unitari = da MAX
#costruzione vincolo
ai = c(ifelse(set$Casino == "Aries", 1, 0),
ifelse(set$Casino == "Libra", 1, 0))
A = matrix(ai,
2
,
78,
byrow = T)#Matrice A del modello, 1 se valore attivo, 0 altrimenti
b = c(849, 230) #upper and lower bound
constraints = c("<=", "<=")
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
library(linprog)
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
max(set$ricavo_unitario)
set %>%
filter(ricavo_unitario == 38471)
#proviamo ad aggiungere qualche vincolo
set %>%
group_by(Casino, Section) %>%
summarise(Num_macchine = sum(numero_macchine)) %>%
mutate(prop_per_mese = round(Num_macchine / sum(Num_macchine), 2)) %>%
View()#il mutate perde un livello dopo il summarise
195+219+248+187
df %>%
group_by(Month) %>%
summarise(Num_macchine = sum(numero_macchine)) %>% View()
#proviamo ad aggiungere qualche vincolo
set %>%
group_by(Casino, Section) %>%
summarise(Num_macchine = sum(numero_macchine)) %>%
mutate(prop_per_mese = round(Num_macchine / sum(Num_macchine), 2)) %>%
View()#il mutate perde un livello dopo il summarise
s = unique(df$Section)
a1 = c()
for (i in 1:4) {
for (k in 1:2) {
a1 = append(a1, ifelse(set$Section == s[i], 1, 0))
}
} #bisogna aggiungere il discorso Casino, ma ci siamo!!!!
s = unique(set$Section)
casino = unique(set$Casino)
a1 = c()
for (t in 1:2) {
for (i in 1:4) {
for (k in 1:2) {
a1 = append(a1, ifelse(set$Section == s[i] & set$Casino == c[t], 1, 0))
}
}
}
c[1]
a1 = append(a1, ifelse(set$Section == s[i] & set$Casino == casino[t], 1, 0))
a1 = c()
for (t in 1:2) {
for (i in 1:4) {
for (k in 1:2) {
a1 = append(a1, ifelse(set$Section == s[i] & set$Casino == casino[t], 1, 0))
}
}
}
A1 = matrix(a1,16,78, byrow = T)
View(A1)
A = rbind(A, A1)
b = c(849, 230, rep(c(round(0.2*849), round(0.3*849)), 16)) #upper and lower bound
b = c(849, 230, rep(c(round(0.2*849), round(0.3*849)), 8)) #upper and lower bound
constraints = c("<=", "<=", rep(c(">=", "<="), 18))
constraints = c("<=", "<=", rep(c(">=", "<="), 8))
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
b = c(849, 230, rep(c(round(0.2*849), round(0.3*849)), 4), rep(c(round(0.2*230), round(0.3*230)), 4)) #upper and lower bound
b
0.3*230
0.2*230
0.2*849
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
69+46+69+46
255+254+170+170
b = c(849, 230, rep(c(round(0.2*849), round(0.3*849)), 4), rep(c(round(0.15*230), round(0.4*230)), 4))
constraints = c("<=", "<=", rep(c(">=", "<="), 8))
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
shadow_price = sol$con
34+34+90+70
set %>%
group_by(Casino, tipo) %>%
summarise(n = n()) %>%
View()
set %>%
group_by(Casino, tipo) %>%
summarise(n = n(), macchine = sum(numero_macchine)) %>%
View()
31+36+12+20+4+84+214+41+32+24+4+326+21+0
3+6+2+19+78+14+2+7+1+842+4
3+6+2+19+78+14+2+7+1+84+4
3+6+2+6+2+19+78+14+2+7+1+84+2+4
s = unique(set$tipo)
section = unique(set$tipo)
a2 = c()
a2 = append(a1, ifelse(set$Section == section[i] & set$Casino == casino[t], 1, 0))
for (t in 1:2) {
for (i in 1:4) {
for (k in 1:2) {
a2 = append(a1, ifelse(set$Section == section[i] & set$Casino == casino[t], 1, 0))
}
}
}
a2 = c()
for (t in 1:2) {
for (i in 1:14) {
for (k in 1:2) {
a2 = append(a1, ifelse(set$Section == section[i] & set$Casino == casino[t], 1, 0))
}
}
}
a2 = c()
for (t in 1:2) {
for (i in 1:14) {
a2 = append(a1, ifelse(set$Section == section[i] & set$Casino == casino[t], 1, 0))
}
}
A2 = matrix(a2,27,78, byrow = T)
View(A2)
View(set)
sezioni = unique(set$Section)
rm(section)
tipo = unique(set$tipo)
casino = unique(set$Casino)
a2 = c()
for (t in 1:2) {
for (i in 1:14) {
a2 = append(a2, ifelse(set$tipo == tipo[i] & set$Casino == casino[t], 1, 0))
}
}
A2 = matrix(a2,27,78, byrow = T)
2184/28
A2 = matrix(a2,28,78, byrow = T)
A2[14,]
all.equal(A2[14,], 0)
all(rep(0,78) == A2[14,0]
)
#check
all(rep(0,78) == A2[14,0])
#c'è un errore nella costruzione della matrice A2 -> forse no proviamo!
A2 = A2 - A2[14,]
A2 - A2[14,]
#c'è un errore nella costruzione della matrice A2 -> forse no proviamo!
A2 = A2[c(1:13,15:28),]
View(A2)
A = rbind(A, A2)
View(slot)
b = c(849, 230, #vincoli 1
rep(c(round(0.2*849), round(0.3*849)), 4), rep(c(round(0.15*230), round(0.4*230)), 4), #vincoli 2
rep(1,27)) #vincoli 3
constraints = c("<=", "<=",
rep(c(">=", "<="), 8),
rep(">=", 27))
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
shadow_price = sol$con
View(shadow_price)
####################
# STRATEGIA 1: MODELLO MACRO DIVISO PER CASINO
####################
options(scipen = 999)
library(rstudioapi)
#Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
print(getwd())
library(readxl)
slot = read_excel("Lucky Duck Entertainment revenue 2013.xls", na = c(".", "NA", "NaN"))
library(funModeling)
library(dplyr)
library(lubridate)
library(ggplot2)
tot = slot %>%
group_by(Casino, Denomination, MachineType, Section, Month) %>%
summarise(numero_macchine = sum(NoMachines),
ricavi_totali = sum(GrossRevenue),
ricavo_unitario = ricavi_totali/numero_macchine,
giocate_totali = sum(Plays),
giocate_unitarie = round(giocate_totali/numero_macchine),
ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination) %>%
mutate(tipo = paste0(MachineType, "_", Denomination))
ricavi_mese = tot %>%
group_by(Month) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
ggplot(data=ricavi_mese, aes(x=ricavi_mese$Month, y = ricavi_mese$ricavo_medio_unitario)) +
geom_line(alpha=.5, size=1, color="#880011") +
ggtitle("Ricavi per Mese") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic() #non è un andamento lineare!
ricavi_mese$Month = as.factor(ricavi_mese$Month)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_unitario,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Ricavi e Numero macchine mensili") +
labs(x="Numero medio macchine", y="Ricavi medi unitari") +
theme_minimal()
ricavi_categoria = tot %>%
group_by(Denomination, MachineType) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario)) %>%
mutate(type = paste0(Denomination,sep = "_", MachineType))
ggplot(data=ricavi_categoria, aes(x=ricavi_categoria$type, y = ricavi_categoria$ricavo_medio_unitario)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Categoria") +
labs(x="Categoria", y="Ricavo medio unitario") +
theme_classic()
ricavi_sezione = tot %>%
group_by(Section) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_sezione, aes(x=ricavi_sezione$Section, y = ricavi_sezione$ricavo_medio_unitario)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Sezione") +
labs(x="Sezione", y="Ricavo medio unitario") +
theme_classic()
tot %>%
group_by(tipo) %>%
summarise(n = n()) %>%
View()#14 categorie al massimo
tot %>%
group_by(Casino,Section, Month) %>%
summarise(n =n()) %>%
View()
tot %>% group_by(Casino, tipo, Section) %>%
summarise(n = n()) %>%
arrange(tipo, Section) %>%
group_by(Section) %>%
summarise(n = n()) %>%
View() #Modifica
tot %>% group_by(Casino, tipo, Section, Month) %>%
summarise(n = n()) %>%
arrange(tipo, Section) %>%
group_by(Section) %>%
summarise(n = n()) %>%
View()
tot %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Casino, Section) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_categorie = sqrt(var(n))) %>%
View()
tot %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Month) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_categorie = sqrt(var(n))) %>%
View() #Modifica?
tot %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Casino, Section) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_categorie = sqrt(var(n))) %>%
View()
set = tot %>%
filter(Month == ymd("2011-09-01")) %>%
arrange(Casino)
f_obj = round(set$ricavo_unitario) #ricavi unitari = da MAX
#quante macchine ci sono al mese nei 2 casino?
tot %>%
group_by(Casino, Month) %>%
summarise(n_macchine = sum(numero_macchine)) %>%
arrange(Month) %>%
View()
#costruzione vincolo
ai = c(ifelse(set$Casino == "Aries", 1, 0),
ifelse(set$Casino == "Libra", 1, 0))
A = matrix(ai,
2,
78,
byrow = T)#Matrice A del modello, 1 se valore attivo, 0 altrimenti
b = c(849, 230) #upper and lower bound
constraints = c("<=", "<=")
library(linprog)
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
#la proporzione di macchine in ciascuna sezione deve essere tra la percentuale minima e quella massima
set %>%
group_by(Casino, Section) %>%
summarise(Num_macchine = sum(numero_macchine)) %>%
mutate(prop_per_mese = round(Num_macchine / sum(Num_macchine), 2)) %>%
View()#il mutate perde un livello dopo il summarise
section = unique(set$Section)
casino = unique(set$Casino)
a1 = c()
for (t in 1:2) {
for (i in 1:4) {
for (k in 1:2) {
a1 = append(a1, ifelse(set$Section == s[i] & set$Casino == casino[t], 1, 0))
}
}
}
for (t in 1:2) {
for (i in 1:4) {
for (k in 1:2) {
a1 = append(a1, ifelse(set$Section == section[i] & set$Casino == casino[t], 1, 0))
}
}
}
A1 = matrix(a1,16,78, byrow = T)
A = rbind(A, A1)
b = c(5896, rep(c(404, 849), 12)) #upper and lower bound
b = c(849, 230, rep(c(round(0.2*849), round(0.3*849)), 4), rep(c(round(0.15*230), round(0.4*230)), 4))
constraints = c("<=", "<=", rep(c(">=", "<="), 8))
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
shadow_price = sol$con
View(shadow_price)
View(set)
View(shadow_price)
set %>%
group_by(Casino, tipo) %>%
summarise(n = n(), macchine = sum(numero_macchine)) %>%
View()
tipo = unique(set$tipo)
casino = unique(set$Casino)
a2 = c()
for (t in 1:2) {
for (i in 1:14) {
a2 = append(a2, ifelse(set$tipo == tipo[i] & set$Casino == casino[t], 1, 0))
}
}
A2 = matrix(a2,28,78, byrow = T) #dovrebbe esserci una riga di tutti 0; presumo sia la 14 perchè in aries ci sono 13 e non 14 categorie
#check
all(rep(0,78) == A2[14,0]) #yes -> da rimuovere
#c'è un errore nella costruzione della matrice A2 -> forse no proviamo!
A2 = A2[c(1:13,15:28),]
A = rbind(A, A2)
b = c(849, 230, #vincoli 1
rep(c(round(0.2*849), round(0.3*849)), 4), rep(c(round(0.15*230), round(0.4*230)), 4), #vincoli 2
rep(1,27)) #vincoli 3
constraints = c("<=", "<=",
rep(c(">=", "<="), 8),
rep(">=", 27))
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
shadow_price = sol$con
sol$con$solution
sol$con$Solution
sol$Solution
sol$con
sol$solution
set[sol$solution,]
sol$solution
summary(sol)
summary(sol)$Solution
x = summary(sol)
View(x)
x$solution
which(x$solution != 0)
help("which")
rm(x)
set[which(sol$solution != 0),]
x = set[which(sol$solution != 0),]
View(x)
